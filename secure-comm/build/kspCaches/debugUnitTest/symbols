{"src\\test\\kotlin\\dev\\aurakai\\auraframefx\\securecomm\\protocol\\SecureChannelTest.kt":["SecureChannelTest:dev.aurakai.auraframefx.securecomm.protocol","messagePacket_serializationRoundtrip:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","bidirectionalCommunication_works:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","secureMessageExchange_worksCorrectly:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","replayAttack_prevention:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","reset_clearsSessionState:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","setUp:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","hiltRule:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","context:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","secureChannel2:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","secureChannel1:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","tearDown:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","tamperedMessage_detection:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","cryptoManager:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","handshake_establishesSecureChannel:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest","testMessage:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest"],"src\\test\\kotlin\\dev\\aurakai\\auraframefx\\securecomm\\keystore\\SecureKeyStoreTest.kt":["editor:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","secureKeyStore:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","context:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","retrieveData_returnsNull_whenDecryptionFails:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","cipher:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","setUp:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","keyGenerator:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","encryptDecrypt_roundTrip_worksCorrectly:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","SecureKeyStoreTest:dev.aurakai.auraframefx.securecomm.keystore","storeData_encryptsAndStoresSuccessfully:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","secretKey:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","secretKeyEntry:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","tearDown:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","storeData_usesExistingKey_whenKeyExists:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","retrieveData_returnsNull_whenDataTooShort:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","clearAllData_clearsSharedPreferences:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","sharedPrefs:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","retrieveData_decryptsAndReturnsData:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","removeData_removesFromSharedPreferences:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","retrieveData_returnsNull_whenKeyNotFound:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","retrieveData_returnsNull_whenBase64DecodingFails:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest","keyStore:dev.aurakai.auraframefx.securecomm.keystore.SecureKeyStoreTest"],"src\\test\\kotlin\\dev\\aurakai\\auraframefx\\securecomm\\NeuralSyncIntegrationTest.kt":["secureCommunication_worksEndToEnd:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","NeuralSyncIntegrationTest:dev.aurakai.auraframefx.securecomm","secureChannel_detectsTampering:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","setUp:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","secureChannel_handlesMultipleMessages:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","cryptoManager:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","tearDown:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","secureChannel1:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","secureChannel2:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","secureChannel_resistsReplayAttacks:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","secureKeyStore_persistsDataSecurely:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","cryptoManager_providesSecureCryptographicOperations:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","hiltRule:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","secureKeyStore:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest","testMessage:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest"],"src\\test\\kotlin\\BuildScriptTest.kt":["proguard configuration present only in release:BuildScriptTest.Defensive","readBuildFile:BuildScriptTest","core project and Android libs present:BuildScriptTest.DependenciesBlock","KspConfig:BuildScriptTest","includes required plugin aliases:BuildScriptTest.Plugins","build features explicitly configured:BuildScriptTest.AndroidBlock","security and utilities present:BuildScriptTest.DependenciesBlock","test dependencies aligned to JUnit Jupiter and coroutines:BuildScriptTest.DependenciesBlock","release build type uses minify and proguard files:BuildScriptTest.AndroidBlock","Plugins:BuildScriptTest","DependenciesBlock:BuildScriptTest","networking stack present:BuildScriptTest.DependenciesBlock","AndroidBlock:BuildScriptTest","kotlin libraries configured:BuildScriptTest.DependenciesBlock","BuildScriptTest:","has expected namespace and SDKs:BuildScriptTest.AndroidBlock","Defensive:BuildScriptTest","hilt and ksp wiring is complete for all source sets:BuildScriptTest.DependenciesBlock","packaging excludes critical META-INF artifacts:BuildScriptTest.AndroidBlock","file does not accidentally enable compose or viewBinding:BuildScriptTest.Defensive","uses Kotlin 2_2 for language and api versions:BuildScriptTest.KspConfig"],"build\\generated\\ksp\\debugUnitTest\\java\\dev\\aurakai\\auraframefx\\securecomm\\protocol\\SecureChannelTest_MembersInjector.java":["injectMembers:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest_MembersInjector","contextProvider:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest_MembersInjector","create:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest_MembersInjector","SecureChannelTest_MembersInjector:dev.aurakai.auraframefx.securecomm.protocol","injectContext:dev.aurakai.auraframefx.securecomm.protocol.SecureChannelTest_MembersInjector"],"src\\test\\kotlin\\dev\\aurakai\\auraframefx\\securecomm\\crypto\\CryptoManagerTest.kt":["crypto:dev.aurakai.auraframefx.securecomm.crypto.CryptoManagerTest","CryptoManagerTest:dev.aurakai.auraframefx.securecomm.crypto","dummyContext:dev.aurakai.auraframefx.securecomm.crypto.CryptoManagerTest","deriveSessionKey changes with different salt and info:dev.aurakai.auraframefx.securecomm.crypto.CryptoManagerTest","generateEcKeyPairP256:dev.aurakai.auraframefx.securecomm.crypto.CryptoManagerTest","deriveSessionKey is deterministic for same inputs and 256-bit AES key:dev.aurakai.auraframefx.securecomm.crypto.CryptoManagerTest","suspend encrypt produces decryptable output equivalent to original plaintext:dev.aurakai.auraframefx.securecomm.crypto.CryptoManagerTest","decrypt with wrong key fails with AEADBadTagException:dev.aurakai.auraframefx.securecomm.crypto.CryptoManagerTest","deriveAesKey:dev.aurakai.auraframefx.securecomm.crypto.CryptoManagerTest","encrypt twice produces different IV and ciphertext for same plaintext:dev.aurakai.auraframefx.securecomm.crypto.CryptoManagerTest","encrypt sync then decrypt returns original plaintext and GCM tag increases size:dev.aurakai.auraframefx.securecomm.crypto.CryptoManagerTest","performKeyAgreement yields identical shared secret for both parties:dev.aurakai.auraframefx.securecomm.crypto.CryptoManagerTest","decrypt with wrong IV fails with AEADBadTagException:dev.aurakai.auraframefx.securecomm.crypto.CryptoManagerTest"],"build\\generated\\ksp\\debugUnitTest\\java\\dev\\aurakai\\auraframefx\\securecomm\\NeuralSyncIntegrationTest_MembersInjector.java":["cryptoManagerProvider:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest_MembersInjector","NeuralSyncIntegrationTest_MembersInjector:dev.aurakai.auraframefx.securecomm","create:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest_MembersInjector","injectMembers:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest_MembersInjector","secureKeyStoreProvider:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest_MembersInjector","injectSecureKeyStore:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest_MembersInjector","injectCryptoManager:dev.aurakai.auraframefx.securecomm.NeuralSyncIntegrationTest_MembersInjector"]}