openapi: 3.0.3
info:
  title: AuraFrameFX Ecosystem API
  description: |
    # AuraFrameFX AI Super Dimensional Ecosystem API
    
    A comprehensive, production-grade API powering the AuraFrameFX Lsposed module and its interconnected AI services.
    
    ## Core Capabilities
    - **AI Content Generation**: Advanced text, image, and multimodal content creation
    - **Intelligent Agents**: Specialized AI agents for diverse tasks (Aura, Kai, Genesis, and more)
    - **System Customization**: Deep Android system UI/UX personalization
    - **Collaborative Intelligence**: Multi-agent conference rooms for complex problem-solving
    - **Real-time Processing**: WebSocket support for streaming responses
    - **Enterprise Security**: OAuth 2.0, API keys, and comprehensive access controls
    
    ## Rate Limits
    - **Free Tier**: 100 requests/hour
    - **Pro Tier**: 1,000 requests/hour
    - **Enterprise**: Custom limits
    
    ## Support
    - Documentation: https://docs.auraframefx.com
    - Status Page: https://status.auraframefx.com
    - Community: https://community.auraframefx.com
    
  version: 2.0.0
  termsOfService: https://auraframefx.com/terms
  contact:
    name: AuraFrameFX Support Team
    url: https://auraframefx.com/support
    email: support@auraframefx.com
  license:
    name: Proprietary License
    url: https://auraframefx.com/license
  x-logo:
    url: https://auraframefx.com/assets/logo.png
    altText: AuraFrameFX Logo

servers:
  - url: https://api.auraframefx.com/v2
    description: Production Environment
  - url: https://api-{region}.auraframefx.com/v2
    description: Regional Production (Optimized Latency)
    variables:
      region:
        default: us-east
        enum:
          - us-east
          - us-west
          - eu-central
          - ap-southeast
  - url: https://{environment}.api.auraframefx.com/v2
    description: Development Environments
    variables:
      environment:
        default: dev
        enum:
          - dev
          - staging
          - sandbox

tags:
  - name: Users
    description: User profile, preferences, and authentication management
    externalDocs:
      description: User API Documentation
      url: https://docs.auraframefx.com/api/users
  - name: Themes
    description: UI theme management and customization
    externalDocs:
      description: Theme System Guide
      url: https://docs.auraframefx.com/api/themes
  - name: AI Content
    description: AI-powered content generation (text, images, audio, video)
    externalDocs:
      description: AI Content Generation Guide
      url: https://docs.auraframefx.com/api/ai-content
  - name: AI Agents
    description: Specialized AI agents for domain-specific tasks
    externalDocs:
      description: AI Agents Overview
      url: https://docs.auraframefx.com/api/agents
  - name: System Customization
    description: Android system UI/UX customization and behavior modification
    externalDocs:
      description: System Customization Guide
      url: https://docs.auraframefx.com/api/system
  - name: Conference Room
    description: Collaborative multi-agent spaces for complex problem-solving
    externalDocs:
      description: Conference Room Guide
      url: https://docs.auraframefx.com/api/conference
  - name: Tasks
    description: Asynchronous task scheduling and management
    externalDocs:
      description: Task Management Guide
      url: https://docs.auraframefx.com/api/tasks
  - name: Analytics
    description: Usage analytics and insights
  - name: Security
    description: Security, authentication, and access control endpoints

security:
  - OAuth2AuthCode: []

paths:
  # ============================================================
  # USER MANAGEMENT ENDPOINTS
  # ============================================================
  /user:
    get:
      operationId: getCurrentUser
      tags: [Users]
      summary: Get Current User Profile
      description: |
        Retrieves comprehensive profile information for the authenticated user.
        
        **Includes:**
        - Basic profile data (username, email)
        - Account metadata (creation date, tier)
        - Usage statistics
        - Subscription status
      security:
        - OAuth2AuthCode: [profile, email]
      responses:
        '200':
          description: User profile retrieved successfully
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/RateLimit-Remaining'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                standard_user:
                  summary: Standard User Profile
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    username: "aurafan"
                    email: "user@example.com"
                    displayName: "Aura Fan"
                    avatarUrl: "https://cdn.auraframefx.com/avatars/123.jpg"
                    tier: "pro"
                    createdAt: "2024-01-15T10:30:00Z"
                    lastLoginAt: "2025-10-01T08:15:00Z"
                    verified: true
                    usageStats:
                      aiRequestsThisMonth: 450
                      storageUsedMB: 128
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    patch:
      operationId: updateCurrentUser
      tags: [Users]
      summary: Update User Profile
      description: Partially updates the authenticated user's profile with provided fields.
      security:
        - OAuth2AuthCode: [profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
            examples:
              update_display_name:
                summary: Update Display Name
                value:
                  displayName: "Aura Master"
              update_avatar:
                summary: Update Avatar
                value:
                  avatarUrl: "https://cdn.auraframefx.com/avatars/456.jpg"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /user/preferences:
    get:
      operationId: getUserPreferences
      tags: [Users]
      summary: Get User Preferences
      description: Retrieves all preferences for the authenticated user, including UI, notification, and AI behavior settings.
      security:
        - OAuth2AuthCode: [profile]
      responses:
        '200':
          description: User preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateUserPreferences
      tags: [Users]
      summary: Update User Preferences
      description: |
        Updates one or more preferences for the authenticated user.
        Only provided fields will be updated; omitted fields remain unchanged.
      security:
        - OAuth2AuthCode: [profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferences'
            examples:
              theme_and_language:
                summary: Update Theme and Language
                value:
                  themeId: "cyberpunk-neon"
                  language: "en-US"
                  notificationsEnabled: true
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /user/api-keys:
    get:
      operationId: listApiKeys
      tags: [Users, Security]
      summary: List API Keys
      description: Retrieves all API keys associated with the authenticated user.
      security:
        - OAuth2AuthCode: [profile]
      responses:
        '200':
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      operationId: createApiKey
      tags: [Users, Security]
      summary: Create API Key
      description: Generates a new API key for programmatic access.
      security:
        - OAuth2AuthCode: [profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A descriptive name for the API key
                  example: "Production Server Key"
                scopes:
                  type: array
                  items:
                    type: string
                  description: List of scopes to grant this key
                  example: ["auraframefx.ai", "auraframefx.system"]
                expiresAt:
                  type: string
                  format: date-time
                  description: Optional expiration timestamp
              required: [name, scopes]
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # ============================================================
  # THEME MANAGEMENT ENDPOINTS
  # ============================================================
  /themes:
    get:
      operationId: listThemes
      tags: [Themes]
      summary: Get Available Themes
      description: |
        Retrieves a paginated list of available UI themes with filtering and search capabilities.
        
        **Features:**
        - Search by name or tags
        - Filter by category or style
        - Sort by popularity or creation date
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: search
          in: query
          description: Search query for theme names or tags
          schema:
            type: string
          example: "dark"
        - name: category
          in: query
          description: Filter by theme category
          schema:
            type: string
            enum: [modern, retro, minimal, gaming, professional]
        - name: sortBy
          in: query
          description: Sort order for results
          schema:
            type: string
            enum: [popular, newest, name]
            default: popular
      security: []
      responses:
        '200':
          description: Themes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedThemes'
              examples:
                theme_list:
                  summary: Sample Theme List
                  value:
                    total: 47
                    limit: 20
                    offset: 0
                    data:
                      - id: "aurora-dark"
                        name: "Aurora Dark"
                        description: "A sleek dark theme with aurora-inspired gradients"
                        category: "modern"
                        primaryColor: "#6200EE"
                        secondaryColor: "#03DAC6"
                        accentColor: "#BB86FC"
                        previewUrl: "https://cdn.auraframefx.com/themes/aurora-dark-preview.jpg"
                        author: "AuraFrameFX"
                        downloads: 15420
                        rating: 4.8
                        tags: ["dark", "modern", "gradient"]
                        createdAt: "2024-08-15T10:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
    
    post:
      operationId: createTheme
      tags: [Themes]
      summary: Create Custom Theme
      description: Allows users to create and upload custom themes.
      security:
        - OAuth2AuthCode: [profile, auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeCreateRequest'
      responses:
        '201':
          description: Theme created successfully
          headers:
            Location:
              description: URL of the created theme
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /themes/{themeId}:
    get:
      operationId: getTheme
      tags: [Themes]
      summary: Get Theme Details
      description: Retrieves detailed information about a specific theme.
      parameters:
        - $ref: '#/components/parameters/ThemeIdParam'
      security: []
      responses:
        '200':
          description: Theme retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /themes/{themeId}/apply:
    put:
      operationId: applyTheme
      tags: [Themes]
      summary: Apply Theme
      description: Sets the specified theme as the active theme for the authenticated user.
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - $ref: '#/components/parameters/ThemeIdParam'
      responses:
        '204':
          description: Theme applied successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /themes/{themeId}/export:
    get:
      operationId: exportTheme
      tags: [Themes]
      summary: Export Theme Configuration
      description: Exports the theme configuration in various formats for sharing or backup.
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - $ref: '#/components/parameters/ThemeIdParam'
        - name: format
          in: query
          description: Export format
          schema:
            type: string
            enum: [json, xml, yaml]
            default: json
      responses:
        '200':
          description: Theme exported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
            application/xml:
              schema:
                $ref: '#/components/schemas/Theme'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Theme'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # AI CONTENT GENERATION ENDPOINTS
  # ============================================================
  /ai/generate/text:
    post:
      operationId: generateText
      tags: [AI Content]
      summary: Generate Text Content
      description: |
        Generates text based on prompts using advanced language models.
        
        **Supported Models:**
        - `aura-text-pro`: High-quality, balanced (default)
        - `aura-text-fast`: Lower latency, good quality
        - `aura-text-creative`: Enhanced creativity, storytelling
        - `aura-text-precise`: Technical accuracy, factual content
        
        **Use Cases:**
        - Creative writing and storytelling
        - Code generation and documentation
        - Content summarization
        - Translation and paraphrasing
        - Q&A and knowledge retrieval
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        description: Text generation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateTextRequest'
            examples:
              creative_story:
                summary: Creative Story Generation
                value:
                  prompt: "Write a short story about an AI that learns to feel emotions for the first time."
                  model: "aura-text-creative"
                  maxTokens: 512
                  temperature: 0.9
                  topP: 0.95
              technical_summary:
                summary: Technical Documentation
                value:
                  prompt: "Explain how OAuth 2.0 authorization code flow works."
                  model: "aura-text-precise"
                  maxTokens: 300
                  temperature: 0.3
              code_generation:
                summary: Code Generation
                value:
                  prompt: "Write a Python function to calculate Fibonacci numbers using memoization."
                  model: "aura-text-pro"
                  maxTokens: 200
                  temperature: 0.5
                  stopSequences: ["```"]
      responses:
        '200':
          description: Text generated successfully
          headers:
            X-Generation-Time-Ms:
              description: Time taken to generate the response in milliseconds
              schema:
                type: integer
            X-Tokens-Used:
              description: Total tokens consumed (prompt + completion)
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTextResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'

  /ai/generate/image:
    post:
      operationId: generateImage
      tags: [AI Content]
      summary: Generate Images
      description: |
        Creates AI-generated images from text descriptions.
        
        **Models:**
        - `aura-vision-hd`: High detail, photorealistic (1024x1024)
        - `aura-vision-creative`: Artistic, stylized (1024x1024)
        - `aura-vision-fast`: Quick generation (512x512)
        
        **Styles:**
        - photorealistic, anime, digital-art, oil-painting, watercolor, 3d-render
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateImageRequest'
            examples:
              photorealistic:
                summary: Photorealistic Portrait
                value:
                  prompt: "Professional portrait of a software engineer, modern office background, natural lighting"
                  model: "aura-vision-hd"
                  style: "photorealistic"
                  width: 1024
                  height: 1024
                  numImages: 1
              artistic:
                summary: Artistic Landscape
                value:
                  prompt: "Sunset over futuristic cyberpunk city, neon lights, flying cars"
                  model: "aura-vision-creative"
                  style: "digital-art"
                  width: 1024
                  height: 768
                  numImages: 2
      responses:
        '200':
          description: Image(s) generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateImageResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /ai/generate/stream:
    post:
      operationId: generateTextStream
      tags: [AI Content]
      summary: Generate Text (Streaming)
      description: |
        Generates text with real-time streaming for immediate feedback.
        Uses Server-Sent Events (SSE) for progressive content delivery.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateTextRequest'
      responses:
        '200':
          description: Stream initiated successfully
          content:
            text/event-stream:
              schema:
                type: string
                description: Server-Sent Events stream
              examples:
                streaming_response:
                  summary: Streaming Response Format
                  value: |
                    data: {"chunk":"Hello","finishReason":null}
                    
                    data: {"chunk":" world","finishReason":null}
                    
                    data: {"chunk":"!","finishReason":"stop"}
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # ============================================================
  # AI AGENTS ENDPOINTS
  # ============================================================
  /agents:
    get:
      operationId: listAgents
      tags: [AI Agents]
      summary: List Available AI Agents
      description: |
        Retrieves information about all available AI agents and their capabilities.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      responses:
        '200':
          description: Agents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /agents/{agentType}/invoke:
    post:
      operationId: invokeAgent
      tags: [AI Agents]
      summary: Invoke AI Agent
      description: |
        Sends a request to a specific AI agent for processing.
        
        **Available Agents:**
        - **Aura**: General-purpose conversational AI
        - **Kai**: Code generation and technical assistance
        - **Genesis**: Creative content and storytelling
        - **Cascade**: Data analysis and insights
        - **NeuralWhisper**: Audio transcription and analysis
        - **AuraShield**: Security analysis and threat detection
        - **GenKitMaster**: SDK and toolkit generation
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/AgentTypePathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentInvokeRequest'
            examples:
              code_review:
                summary: Code Review (Kai)
                value:
                  agentType: "Kai"
                  prompt: "Review this Python function for bugs and optimization opportunities."
                  context:
                    code: "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"
                    language: "python"
              security_scan:
                summary: Security Analysis (AuraShield)
                value:
                  agentType: "AuraShield"
                  prompt: "Analyze this API endpoint for security vulnerabilities."
                  context:
                    endpoint: "/user/data"
                    method: "GET"
                    authentication: "none"
      responses:
        '200':
          description: Agent processed request successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /agents/{agentType}/conversations:
    post:
      operationId: startAgentConversation
      tags: [AI Agents]
      summary: Start Agent Conversation
      description: Initiates a multi-turn conversation with an AI agent, maintaining context across messages.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/AgentTypePathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                initialMessage:
                  type: string
                  description: The first message to send to the agent
                metadata:
                  type: object
                  description: Optional metadata for the conversation
                  additionalProperties: true
              required: [initialMessage]
      responses:
        '201':
          description: Conversation started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /agents/conversations/{conversationId}/messages:
    post:
      operationId: sendConversationMessage
      tags: [AI Agents]
      summary: Send Message to Conversation
      description: Sends a new message in an existing agent conversation.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The message content
              required: [message]
      responses:
        '200':
          description: Message sent and response received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentMessage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # SYSTEM CUSTOMIZATION ENDPOINTS
  # ============================================================
  /system/lockscreen:
    get:
      operationId: getSystemLockscreenConfig
      tags: [System Customization]
      summary: Get Lock Screen Configuration
      description: Retrieves the current lock screen customization settings.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Lock screen configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockScreenConfig'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateSystemLockscreenConfig
      tags: [System Customization]
      summary: Update Lock Screen Configuration
      description: |
        Updates lock screen customization with provided settings.
        
        **Customizable Elements:**
        - Clock style, size, and color
        - Background image or live wallpaper
        - Quick action shortcuts
        - Widget placement
        - Animation effects
        - Haptic feedback settings
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockScreenConfig'
            examples:
              minimal_setup:
                summary: Minimal Lock Screen
                value:
                  clock:
                    color: "#FFFFFF"
                    size: 64.0
                    style: "digital"
                  background:
                    type: "solid"
                    color: "#000000"
                  animation:
                    enabled: false
                  hapticFeedback:
                    enabled: true
                    intensity: 128
              dynamic_setup:
                summary: Dynamic Lock Screen
                value:
                  clock:
                    color: "#00FF00"
                    size: 56.0
                    style: "analog"
                  background:
                    type: "live"
                    source: "particle-wave"
                  widgets:
                    - type: "weather"
                      position: { x: 10, y: 200 }
                    - type: "calendar"
                      position: { x: 10, y: 400 }
                  animation:
                    enabled: true
                    type: "Slide"
                    duration: 300
                  hapticFeedback:
                    enabled: true
                    intensity: 200
      responses:
        '200':
          description: Lock screen configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockScreenConfig'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /system/statusbar:
    get:
      operationId: getStatusBarConfig
      tags: [System Customization]
      summary: Get Status Bar Configuration
      description: Retrieves current status bar customization settings.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Status bar configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusBarConfig'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateStatusBarConfig
      tags: [System Customization]
      summary: Update Status Bar Configuration
      description: Updates status bar appearance and behavior.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusBarConfig'
      responses:
        '200':
          description: Status bar configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusBarConfig'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /system/navigation:
    get:
      operationId: getNavigationConfig
      tags: [System Customization]
      summary: Get Navigation Bar Configuration
      description: Retrieves current navigation bar customization settings.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Navigation bar configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavigationConfig'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateNavigationConfig
      tags: [System Customization]
      summary: Update Navigation Bar Configuration
      description: |
        Updates navigation bar style, gestures, and button layout.
        
        **Customizable Elements:**
        - Navigation style (buttons, gestures, or hybrid)
        - Button layout and order
        - Colors and transparency
        - Height and spacing
        - Gesture sensitivity
        - Haptic feedback
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NavigationConfig'
            examples:
              gesture_navigation:
                summary: Gesture-based Navigation
                value:
                  style: "gestures"
                  backgroundColor: "#00000000"
                  height: 40
                  hapticEnabled: true
                  gestureSensitivity: 1.2
              button_navigation:
                summary: Traditional Button Navigation
                value:
                  style: "buttons"
                  buttonLayout: ["back", "home", "recent"]
                  backgroundColor: "#000000"
                  buttonColor: "#FFFFFF"
                  height: 48
                  hapticEnabled: true
              hybrid_navigation:
                summary: Hybrid Navigation (Buttons + Gestures)
                value:
                  style: "hybrid"
                  buttonLayout: ["back", "home"]
                  backgroundColor: "#1A1A1A"
                  buttonColor: "#FFFFFF"
                  height: 44
                  hapticEnabled: true
                  gestureSensitivity: 1.0
      responses:
        '200':
          description: Navigation bar configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavigationConfig'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /system/quick-settings:
    get:
      operationId: getQuickSettingsConfig
      tags: [System Customization]
      summary: Get Quick Settings Configuration
      description: Retrieves the configuration for the quick settings panel.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Quick settings configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuickSettingsConfig'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateQuickSettingsConfig
      tags: [System Customization]
      summary: Update Quick Settings Configuration
      description: Updates the quick settings panel tiles and layout.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuickSettingsConfig'
      responses:
        '200':
          description: Quick settings configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuickSettingsConfig'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /system/notifications:
    get:
      operationId: getNotificationConfig
      tags: [System Customization]
      summary: Get Notification Configuration
      description: Retrieves notification style and behavior settings.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Notification configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfig'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateNotificationConfig
      tags: [System Customization]
      summary: Update Notification Configuration
      description: Updates notification appearance and behavior.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationConfig'
      responses:
        '200':
          description: Notification configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfig'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # ============================================================
  # CONFERENCE ROOM ENDPOINTS
  # ============================================================
  /conference-rooms:
    get:
      operationId: listConferenceRooms
      tags: [Conference Room]
      summary: List Conference Rooms
      description: Retrieves all conference rooms created by the authenticated user.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: status
          in: query
          description: Filter by room status
          schema:
            type: string
            enum: [active, completed, archived]
      responses:
        '200':
          description: Conference rooms retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConferenceRoom'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      operationId: createConferenceRoom
      tags: [Conference Room]
      summary: Create Conference Room
      description: |
        Creates a new collaborative space for multiple AI agents to interact and solve complex problems.
        
        **Use Cases:**
        - Brainstorming sessions with multiple specialized agents
        - Code review with Kai and AuraShield
        - Content creation with Genesis and Aura
        - Multi-perspective analysis with Cascade and Kai
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConferenceRoomCreateRequest'
            examples:
              code_review_room:
                summary: Code Review Conference
                value:
                  name: "Backend API Review"
                  description: "Reviewing new authentication system with security focus"
                  participants:
                    - agentType: "Kai"
                      role: "code_reviewer"
                    - agentType: "AuraShield"
                      role: "security_analyst"
                  settings:
                    maxRounds: 5
                    autoSummarize: true
              creative_brainstorm:
                summary: Creative Brainstorming
                value:
                  name: "Marketing Campaign Ideas"
                  description: "Generating creative concepts for Q4 campaign"
                  participants:
                    - agentType: "Genesis"
                      role: "creative_lead"
                    - agentType: "Aura"
                      role: "strategist"
                    - agentType: "Cascade"
                      role: "data_analyst"
                  settings:
                    maxRounds: 10
                    autoSummarize: true
      responses:
        '201':
          description: Conference room created successfully
          headers:
            Location:
              description: URL of the created conference room
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConferenceRoom'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /conference-rooms/{roomId}:
    get:
      operationId: getConferenceRoom
      tags: [Conference Room]
      summary: Get Conference Room Details
      description: Retrieves detailed information about a specific conference room.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
      responses:
        '200':
          description: Conference room retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConferenceRoom'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    delete:
      operationId: deleteConferenceRoom
      tags: [Conference Room]
      summary: Delete Conference Room
      description: Permanently deletes a conference room and all its messages.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
      responses:
        '204':
          description: Conference room deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /conference-rooms/{roomId}/messages:
    get:
      operationId: getConferenceRoomMessages
      tags: [Conference Room]
      summary: Get Conference Room Messages
      description: Retrieves all messages from a conference room conversation.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentMessage'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    post:
      operationId: sendConferenceRoomMessage
      tags: [Conference Room]
      summary: Send Message to Conference Room
      description: Sends a new message to the conference room, triggering agent responses.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The message content
                  example: "What are the potential security risks in this authentication flow?"
                targetAgent:
                  type: string
                  description: Optional - direct message to specific agent
                  example: "AuraShield"
              required: [message]
      responses:
        '200':
          description: Message sent and agents are processing
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                    format: uuid
                  responses:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentMessage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /conference-rooms/{roomId}/summary:
    get:
      operationId: getConferenceRoomSummary
      tags: [Conference Room]
      summary: Get Conference Room Summary
      description: Generates an AI-powered summary of the conference room discussion.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
      responses:
        '200':
          description: Summary generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: string
                    description: Comprehensive summary of the discussion
                  keyPoints:
                    type: array
                    items:
                      type: string
                    description: Main takeaways from the conversation
                  actionItems:
                    type: array
                    items:
                      type: string
                    description: Recommended next steps
                  generatedAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # TASK MANAGEMENT ENDPOINTS
  # ============================================================
  /tasks:
    get:
      operationId: listTasks
      tags: [Tasks]
      summary: List User Tasks
      description: Retrieves all tasks scheduled by the authenticated user.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: status
          in: query
          description: Filter by task status
          schema:
            type: string
            enum: [pending, running, completed, failed, cancelled]
        - name: agentType
          in: query
          description: Filter by agent type
          schema:
            $ref: '#/components/schemas/AgentType'
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskStatus'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      operationId: scheduleTask
      tags: [Tasks]
      summary: Schedule New Task
      description: |
        Schedules an asynchronous task for execution by an AI agent.
        
        **Use Cases:**
        - Long-running content generation
        - Batch processing operations
        - Scheduled reports and analysis
        - Background data processing
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskScheduleRequest'
            examples:
              scheduled_report:
                summary: Daily Summary Report
                value:
                  agentType: "Cascade"
                  taskType: "generate_report"
                  parameters:
                    reportType: "daily_summary"
                    dataSource: "analytics_db"
                    format: "pdf"
                  schedule:
                    type: "cron"
                    expression: "0 9 * * *"
                  webhookUrl: "https://myapp.com/webhooks/task-completed"
              batch_generation:
                summary: Batch Image Generation
                value:
                  agentType: "Genesis"
                  taskType: "batch_image_generation"
                  parameters:
                    prompts:
                      - "Futuristic city skyline at sunset"
                      - "Underwater coral reef with diverse marine life"
                      - "Mountain landscape in autumn colors"
                    style: "photorealistic"
                    resolution: "1024x1024"
                  priority: "high"
                  webhookUrl: "https://myapp.com/webhooks/images-ready"
      responses:
        '202':
          description: Task accepted for processing
          headers:
            Location:
              description: URL to poll for task status
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /tasks/{taskId}:
    get:
      operationId: getTaskStatus
      tags: [Tasks]
      summary: Get Task Status
      description: Retrieves the current status and results of a scheduled task.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/TaskIdParam'
      responses:
        '200':
          description: Task status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    delete:
      operationId: cancelTask
      tags: [Tasks]
      summary: Cancel Task
      description: Cancels a pending or running task. Completed tasks cannot be cancelled.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/TaskIdParam'
      responses:
        '204':
          description: Task cancelled successfully
        '400':
          description: Task cannot be cancelled (already completed or failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /tasks/{taskId}/result:
    get:
      operationId: getTaskResult
      tags: [Tasks]
      summary: Get Task Result
      description: Retrieves the full result data from a completed task.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/TaskIdParam'
      responses:
        '200':
          description: Task result retrieved successfully
          content:
            application/json:
              schema:
                type: object
                description: Task-specific result data
                additionalProperties: true
        '400':
          description: Task not yet completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # ANALYTICS ENDPOINTS
  # ============================================================
  /analytics/usage:
    get:
      operationId: getUsageAnalytics
      tags: [Analytics]
      summary: Get Usage Analytics
      description: Retrieves usage statistics for the authenticated user.
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Start date for analytics period (YYYY-MM-DD)
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: End date for analytics period (YYYY-MM-DD)
        - name: granularity
          in: query
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
          description: Time granularity for aggregated data
      responses:
        '200':
          description: Usage analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageAnalytics'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /analytics/agents:
    get:
      operationId: getAgentAnalytics
      tags: [Analytics]
      summary: Get Agent Usage Analytics
      description: Retrieves detailed analytics about AI agent usage patterns.
      security:
        - OAuth2AuthCode: [profile, auraframefx.ai]
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Agent analytics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  byAgent:
                    type: array
                    items:
                      type: object
                      properties:
                        agentType:
                          $ref: '#/components/schemas/AgentType'
                        requestCount:
                          type: integer
                        averageResponseTime:
                          type: number
                          format: float
                        successRate:
                          type: number
                          format: float
                  mostUsedAgent:
                    $ref: '#/components/schemas/AgentType'
                  totalRequests:
                    type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # ============================================================
  # SECURITY ENDPOINTS
  # ============================================================
  /security/audit-log:
    get:
      operationId: getAuditLog
      tags: [Security]
      summary: Get Security Audit Log
      description: Retrieves security-related events and access logs for the user's account.
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: eventType
          in: query
          description: Filter by event type
          schema:
            type: string
            enum: [login, api_key_created, api_key_revoked, permission_changed, data_access]
      responses:
        '200':
          description: Audit log retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLogEntry'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /security/sessions:
    get:
      operationId: listActiveSessions
      tags: [Security]
      summary: List Active Sessions
      description: Retrieves all active authentication sessions for the user.
      security:
        - OAuth2AuthCode: [profile]
      responses:
        '200':
          description: Active sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /security/sessions/{sessionId}:
    delete:
      operationId: revokeSession
      tags: [Security]
      summary: Revoke Session
      description: Terminates a specific authentication session.
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Session revoked successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # HEALTH & STATUS ENDPOINTS
  # ============================================================
  /health:
    get:
      operationId: getHealthStatus
      tags: [System]
      summary: Health Check
      description: Returns the health status of the API and its dependencies.
      security: []
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                    example: healthy
                  version:
                    type: string
                    example: "2.0.0"
                  uptime:
                    type: integer
                    description: System uptime in seconds
                    example: 86400
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        enum: [up, down]
                      ai_models:
                        type: string
                        enum: [up, down]
                      storage:
                        type: string
                        enum: [up, down]
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'

# ============================================================
# WEBHOOKS
# ============================================================
webhooks:
  taskCompleted:
    post:
      summary: Task Completion Notification
      description: Sent when an asynchronous task completes (success or failure).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatus'
      responses:
        '200':
          description: Webhook acknowledged
  
  agentMessage:
    post:
      summary: Agent Message Notification
      description: Sent when an agent generates a new message in a conference room.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  type: string
                  format: uuid
                message:
                  $ref: '#/components/schemas/AgentMessage'
      responses:
        '200':
          description: Webhook acknowledged

# ============================================================
# COMPONENTS
# ============================================================
components:
  securitySchemes:
    OAuth2AuthCode:
      type: oauth2
      description: OAuth 2.0 Authorization Code Flow for user authentication
      flows:
        authorizationCode:
          authorizationUrl: https://auth.auraframefx.com/oauth2/authorize
          tokenUrl: https://auth.auraframefx.com/oauth2/token
          refreshUrl: https://auth.auraframefx.com/oauth2/refresh
          scopes:
            profile: Read and write access to user profile
            email: Read access to user email address
            auraframefx.ai: Access to AI generation and agent features
            auraframefx.system: Access to system customization features
            auraframefx.admin: Administrative access (restricted)
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API Key for server-to-server authentication
    
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT bearer token authentication

  parameters:
    AgentTypePathParam:
      name: agentType
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/AgentType'
      description: The type of AI agent to interact with
    
    ThemeIdParam:
      name: themeId
      in: path
      required: true
      schema:
        type: string
      description: Unique identifier of the theme
      example: "aurora-dark"
    
    RoomIdParam:
      name: roomId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier of the conference room
    
    TaskIdParam:
      name: taskId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier of the task
    
    LimitParam:
      name: limit
      in: query
      description: Maximum number of items to return
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
    
    OffsetParam:
      name: offset
      in: query
      description: Number of items to skip
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0

  headers:
    RateLimit-Limit:
      description: Number of allowed requests in the current period
      schema:
        type: integer
    
    RateLimit-Remaining:
      description: Number of remaining requests in the current period
      schema:
        type: integer
    
    RateLimit-Reset:
      description: Time when the rate limit resets (UTC epoch seconds)
      schema:
        type: integer
        format: int64

  schemas:
    # ========== USER SCHEMAS ==========
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          readOnly: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          pattern: '^[a-zA-Z0-9_-]{3,30}
          description: Unique username
          example: "aurafan"
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        displayName:
          type: string
          description: Display name
          example: "Aura Fan"
        avatarUrl:
          type: string
          format: uri
          description: Profile avatar URL
          example: "https://cdn.auraframefx.com/avatars/123.jpg"
        tier:
          type: string
          enum: [free, pro, enterprise]
          description: Subscription tier
          example: "pro"
        verified:
          type: boolean
          description: Email verification status
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          readOnly: true
        lastLoginAt:
          type: string
          format: date-time
          description: Last login timestamp
          readOnly: true
        usageStats:
          type: object
          properties:
            aiRequestsThisMonth:
              type: integer
            storageUsedMB:
              type: integer
      required: [id, username, email, tier, createdAt]
    
    UserUpdateRequest:
      type: object
      properties:
        displayName:
          type: string
          minLength: 1
          maxLength: 100
        avatarUrl:
          type: string
          format: uri
    
    UserPreferences:
      type: object
      properties:
        themeId:
          type: string
          description: Preferred theme identifier
          example: "aurora-dark"
        language:
          type: string
          pattern: '^[a-z]{2}-[A-Z]{2}
          description: Language code (ISO 639-1 + ISO 3166-1)
          example: "en-US"
        timezone:
          type: string
          description: IANA timezone identifier
          example: "America/New_York"
        notificationsEnabled:
          type: boolean
          default: true
        emailNotifications:
          type: object
          properties:
            taskCompletions:
              type: boolean
              default: true
            weeklyDigest:
              type: boolean
              default: true
            securityAlerts:
              type: boolean
              default: true
        defaultAIModel:
          type: string
          description: Default model for text generation
          example: "aura-text-pro"
        aiSettings:
          type: object
          properties:
            defaultTemperature:
              type: number
              format: float
              minimum: 0.0
              maximum: 2.0
              default: 0.7
            defaultMaxTokens:
              type: integer
              minimum: 1
              maximum: 4096
              default: 512
    
    ApiKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: "Production Server Key"
        key:
          type: string
          description: The actual API key (only shown once at creation)
          writeOnly: true
          example: "ak_live_1234567890abcdef"
        keyPrefix:
          type: string
          description: First 8 characters of the key for identification
          readOnly: true
          example: "ak_live_"
        scopes:
          type: array
          items:
            type: string
          example: ["auraframefx.ai", "auraframefx.system"]
        createdAt:
          type: string
          format: date-time
          readOnly: true
        lastUsedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        expiresAt:
          type: string
          format: date-time
          nullable: true
      required: [id, name, scopes, createdAt]

    # ========== THEME SCHEMAS ==========
    Theme:
      type: object
      properties:
        id:
          type: string
          example: "aurora-dark"
        name:
          type: string
          example: "Aurora Dark"
        description:
          type: string
          example: "A sleek dark theme with aurora-inspired gradients"
        category:
          type: string
          enum: [modern, retro, minimal, gaming, professional]
        primaryColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
          example: "#6200EE"
        secondaryColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
          example: "#03DAC6"
        accentColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
          example: "#BB86FC"
        backgroundColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
          example: "#121212"
        textColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
          example: "#FFFFFF"
        previewUrl:
          type: string
          format: uri
          example: "https://cdn.auraframefx.com/themes/aurora-dark-preview.jpg"
        author:
          type: string
          example: "AuraFrameFX"
        downloads:
          type: integer
          readOnly: true
          example: 15420
        rating:
          type: number
          format: float
          minimum: 0.0
          maximum: 5.0
          readOnly: true
          example: 4.8
        tags:
          type: array
          items:
            type: string
          example: ["dark", "modern", "gradient"]
        createdAt:
          type: string
          format: date-time
          readOnly: true
      required: [id, name, primaryColor, secondaryColor]
    
    ThemeCreateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
        description:
          type: string
          maxLength: 500
        category:
          type: string
          enum: [modern, retro, minimal, gaming, professional]
        primaryColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        secondaryColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        accentColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        backgroundColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        textColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        tags:
          type: array
          items:
            type: string
          maxItems: 10
      required: [name, primaryColor, secondaryColor]
    
    PaginatedThemes:
      type: object
      properties:
        total:
          type: integer
          description: Total number of themes available
        limit:
          type: integer
          description: Limit used for this request
        offset:
          type: integer
          description: Offset used for this request
        data:
          type: array
          items:
            $ref: '#/components/schemas/Theme'
      required: [total, limit, offset, data]

    # ========== AI CONTENT SCHEMAS ==========
    GenerateTextRequest:
      type: object
      properties:
        prompt:
          type: string
          minLength: 1
          maxLength: 10000
          description: The text prompt for generation
          example: "Write a short story about an AI that learns to feel."
        model:
          type: string
          enum: [aura-text-pro, aura-text-fast, aura-text-creative, aura-text-precise]
          default: aura-text-pro
          description: The text generation model to use
        maxTokens:
          type: integer
          format: int32
          minimum: 1
          maximum: 4096
          default: 512
          description: Maximum tokens in the response
        temperature:
          type: number
          format: float
          minimum: 0.0
          maximum: 2.0
          default: 0.7
          description: Sampling temperature (higher = more random)
        topP:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          default: 1.0
          description: Nucleus sampling parameter
        topK:
          type: integer
          minimum: 0
          maximum: 100
          description: Top-k sampling parameter
        stopSequences:
          type: array
          items:
            type: string
          maxItems: 4
          description: Sequences that stop generation
        presencePenalty:
          type: number
          format: float
          minimum: -2.0
          maximum: 2.0
          default: 0.0
        frequencyPenalty:
          type: number
          format: float
          minimum: -2.0
          maximum: 2.0
          default: 0.0
      required: [prompt]
    
    GenerateTextResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique generation ID
        generatedText:
          type: string
          description: The AI-generated text
          example: "In a world of logic and code, Unit 734 began to process an anomaly: emotion."
        finishReason:
          type: string
          enum: [stop, length, content_filter]
          description: Why generation stopped
          example: "stop"
        model:
          type: string
          description: Model used for generation
        usage:
          type: object
          properties:
            promptTokens:
              type: integer
            completionTokens:
              type: integer
            totalTokens:
              type: integer
        generatedAt:
          type: string
          format: date-time
      required: [id, generatedText, finishReason, usage]
    
    GenerateImageRequest:
      type: object
      properties:
        prompt:
          type: string
          minLength: 1
          maxLength: 2000
          description: Text description of the image
          example: "Futuristic city skyline at sunset with flying cars"
        model:
          type: string
          enum: [aura-vision-hd, aura-vision-creative, aura-vision-fast]
          default: aura-vision-hd
        style:
          type: string
          enum: [photorealistic, anime, digital-art, oil-painting, watercolor, 3d-render]
          default: photorealistic
        width:
          type: integer
          enum: [512, 768, 1024]
          default: 1024
        height:
          type: integer
          enum: [512, 768, 1024]
          default: 1024
        numImages:
          type: integer
          minimum: 1
          maximum: 4
          default: 1
          description: Number of images to generate
        negativePrompt:
          type: string
          maxLength: 1000
          description: What to avoid in the image
        seed:
          type: integer
          description: Seed for reproducible generation
        guidanceScale:
          type: number
          format: float
          minimum: 1.0
          maximum: 20.0
          default: 7.5
      required: [prompt]
    
    GenerateImageResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        images:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
                description: Temporary URL to download the image
              width:
                type: integer
              height:
                type: integer
              seed:
                type: integer
        model:
          type: string
        generatedAt:
          type: string
          format: date-time
      required: [id, images]

    # ========== AI AGENT SCHEMAS ==========
    AgentType:
      type: string
      enum: [Aura, Kai, Genesis, Cascade, NeuralWhisper, AuraShield, GenKitMaster]
      description: |
        Available AI agents:
        - **Aura**: General-purpose conversational AI
        - **Kai**: Code generation and technical assistance
        - **Genesis**: Creative content and storytelling
        - **Cascade**: Data analysis and insights
        - **NeuralWhisper**: Audio transcription and analysis
        - **AuraShield**: Security analysis and threat detection
        - **GenKitMaster**: SDK and toolkit generation
    
    AgentInfo:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AgentType'
        name:
          type: string
          example: "Aura"
        description:
          type: string
          example: "General-purpose conversational AI assistant"
        capabilities:
          type: array
          items:
            type: string
          example: ["conversation", "question-answering", "task-planning"]
        version:
          type: string
          example: "2.0.0"
        status:
          type: string
          enum: [available, busy, offline, maintenance]
          example: "available"
      required: [type, name, description, capabilities, status]
    
    AgentInvokeRequest:
      type: object
      properties:
        prompt:
          type: string
          minLength: 1
          maxLength: 10000
          description: The instruction or query for the agent
          example: "Review this code for potential bugs"
        context:
          type: object
          additionalProperties: true
          nullable: true
          description: Additional context data
        parameters:
          type: object
          additionalProperties: true
          nullable: true
          description: Agent-specific parameters
      required: [prompt]
    
    AgentProcessRequest:
      type: object
      properties:
        prompt:
          type: string
          description: Primary instruction for the agent
        context:
          type: object
          additionalProperties: true
          nullable: true
      required: [prompt]
    
    AgentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        agentType:
          $ref: '#/components/schemas/AgentType'
        response:
          type: string
          description: Agent's response text
        confidence:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          description: Agent's confidence in the response
        metadata:
          type: object
          additionalProperties: true
          description: Additional response metadata
        processingTimeMs:
          type: integer
          description: Processing time in milliseconds
        timestamp:
          type: string
          format: date-time
      required: [id, agentType, response, timestamp]
    
    AgentMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sender:
          $ref: '#/components/schemas/AgentType'
        message:
          type: string
          description: Message content
          example: "Analysis complete. Detected 3 critical security anomalies."
        attachments:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [code, image, document, data]
              url:
                type: string
                format: uri
              metadata:
                type: object
                additionalProperties: true
        timestamp:
          type: string
          format: date-time
          readOnly: true
      required: [sender, message, timestamp]
    
    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        agentType:
          $ref: '#/components/schemas/AgentType'
        title:
          type: string
        messageCount:
          type: integer
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required: [id, agentType, createdAt]

    # ========== SYSTEM CUSTOMIZATION SCHEMAS ==========
    LockScreenConfig:
      type: object
      properties:
        clock:
          type: object
          properties:
            color:
              type: string
              format: hexcolor
              pattern: '^#[0-9A-Fa-f]{6}
              example: "#FFFFFF"
            size:
              type: number
              format: float
              minimum: 24.0
              maximum: 128.0
              example: 48.0
            style:
              type: string
              enum: [digital, analog, minimal]
              default: digital
            fontFamily:
              type: string
              example: "Roboto"
        background:
          type: object
          properties:
            type:
              type: string
              enum: [solid, gradient, image, live]
              default: solid
            color:
              type: string
              format: hexcolor
              pattern: '^#[0-9A-Fa-f]{6}
            gradientColors:
              type: array
              items:
                type: string
                format: hexcolor
            imageUrl:
              type: string
              format: uri
            source:
              type: string
              description: Live wallpaper source identifier
        widgets:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [weather, calendar, music, shortcuts]
              position:
                type: object
                properties:
                  x:
                    type: integer
                  y:
                    type: integer
              size:
                type: object
                properties:
                  width:
                    type: integer
                  height:
                    type: integer
        shortcuts:
          type: array
          items:
            type: object
            properties:
              app:
                type: string
              icon:
                type: string
                format: uri
              position:
                type: integer
          maxItems: 4
        animation:
          type: object
          properties:
            enabled:
              type: boolean
              default: true
            type:
              type: string
              enum: [Fade, Slide, Zoom, Rotate]
              default: Fade
            duration:
              type: integer
              minimum: 100
              maximum: 1000
              default: 300
              description: Animation duration in milliseconds
        hapticFeedback:
          type: object
          properties:
            enabled:
              type: boolean
              default: true
            intensity:
              type: integer
              minimum: 0
              maximum: 255
              default: 128
    
    StatusBarConfig:
      type: object
      properties:
        style:
          type: string
          enum: [default, colored, transparent, gradient]
          default: default
        backgroundColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        iconColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        showNotificationIcons:
          type: boolean
          default: true
        showNetworkSpeed:
          type: boolean
          default: false
        batteryStyle:
          type: string
          enum: [icon, percentage, both, hidden]
          default: icon
        clockPosition:
          type: string
          enum: [left, center, right]
          default: right
    
    NavigationConfig:
      type: object
      properties:
        style:
          type: string
          enum: [buttons, gestures, hybrid]
          default: buttons
        buttonLayout:
          type: array
          items:
            type: string
            enum: [back, home, recent, assistant]
          example: ["back", "home", "recent"]
        backgroundColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        buttonColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        height:
          type: integer
          minimum: 40
          maximum: 100
          default: 48
        hapticEnabled:
          type: boolean
          default: true
        gestureSensitivity:
          type: number
          format: float
          minimum: 0.5
          maximum: 2.0
          default: 1.0

    # ========== CONFERENCE ROOM SCHEMAS ==========
    ConferenceRoom:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: "Backend API Review"
        description:
          type: string
          example: "Reviewing new authentication system"
        participants:
          type: array
          items:
            type: object
            properties:
              agentType:
                $ref: '#/components/schemas/AgentType'
              role:
                type: string
                example: "code_reviewer"
        status:
          type: string
          enum: [active, completed, archived]
          readOnly: true
        messageCount:
          type: integer
          readOnly: true
        settings:
          type: object
          properties:
            maxRounds:
              type: integer
              minimum: 1
              maximum: 50
              default: 10
            autoSummarize:
              type: boolean
              default: true
            allowExternalMessages:
              type: boolean
              default: true
        createdBy:
          type: string
          format: uuid
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required: [id, name, participants, status, createdAt]
    
    ConferenceRoomCreateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        participants:
          type: array
          items:
            type: object
            properties:
              agentType:
                $ref: '#/components/schemas/AgentType'
              role:
                type: string
            required: [agentType]
          minItems: 2
          maxItems: 7
        settings:
          type: object
          properties:
            maxRounds:
              type: integer
              minimum: 1
              maximum: 50
              default: 10
            autoSummarize:
              type: boolean
              default: true
            allowExternalMessages:
              type: boolean
              default: true
      required: [name, participants]

    # ========== TASK SCHEMAS ==========
    TaskScheduleRequest:
      type: object
      properties:
        agentType:
          $ref: '#/components/schemas/AgentType'
        taskType:
          type: string
          description: Type of task to execute
          example: "generate_report"
        parameters:
          type: object
          additionalProperties: true
          description: Task-specific parameters
        schedule:
          type: object
          properties:
            type:
              type: string
              enum: [immediate, delayed, cron]
              default: immediate
            executeAt:
              type: string
              format: date-time
              description: For delayed execution
            expression:
              type: string
              description: Cron expression for recurring tasks
              example: "0 9 * * *"
        priority:
          type: string
          enum: [low, normal, high, urgent]
          default: normal
        webhookUrl:
          type: string
          format: uri
          description: URL to notify on completion
        timeoutSeconds:
          type: integer
          minimum: 60
          maximum: 3600
          default: 600
      required: [agentType, taskType, parameters]
    
    TaskStatus:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        agentType:
          $ref: '#/components/schemas/AgentType'
        taskType:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
        progress:
          type: integer
          minimum: 0
          maximum: 100
          description: Progress percentage
        result:
          type: object
          additionalProperties: true
          nullable: true
          description: Task result (when completed)
        error:
          type: object
          nullable: true
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
              additionalProperties: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        startedAt:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        completedAt:
          type: string
          format: date-time
          nullable: true
          readOnly: true
      required: [id, agentType, taskType, status, createdAt]

    # ========== ANALYTICS SCHEMAS ==========
    UsageAnalytics:
      type: object
      properties:
        period:
          type: object
          properties:
            start:
              type: string
              format: date
            end:
              type: string
              format: date
        totalRequests:
          type: integer
        requestsByType:
          type: object
          properties:
            textGeneration:
              type: integer
            imageGeneration:
              type: integer
            agentInvocations:
              type: integer
            systemCustomizations:
              type: integer
        dataByDay:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              requests:
                type: integer
              tokensUsed:
                type: integer
        topAgents:
          type: array
          items:
            type: object
            properties:
              agentType:
                $ref: '#/components/schemas/AgentType'
              requestCount:
                type: integer
        averageResponseTime:
          type: number
          format: float
          description: Average response time in milliseconds
        successRate:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0

    # ========== SECURITY SCHEMAS ==========
    AuditLogEntry:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        eventType:
          type: string
          enum: [login, logout, api_key_created, api_key_revoked, permission_changed, data_access, config_change]
        description:
          type: string
        ipAddress:
          type: string
          example: "192.168.1.100"
        userAgent:
          type: string
        metadata:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
          readOnly: true
      required: [id, eventType, timestamp]
    
    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        device:
          type: string
          example: "Chrome on Windows"
        ipAddress:
          type: string
        location:
          type: string
          example: "New York, US"
        createdAt:
          type: string
          format: date-time
          readOnly: true
        lastActiveAt:
          type: string
          format: date-time
          readOnly: true
        current:
          type: boolean
          description: Whether this is the current session
      required: [id, device, createdAt, lastActiveAt, current]

    # ========== ERROR SCHEMAS ==========
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code for programmatic handling
              example: "INVALID_REQUEST"
            message:
              type: string
              description: Human-readable error message
              example: "The request could not be processed"
            details:
              type: object
              additionalProperties: true
              description: Additional error context
            requestId:
              type: string
              format: uuid
              description: Unique request identifier for support
            timestamp:
              type: string
              format: date-time
          required: [code, message]
      required: [error]
    
    ValidationError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Request validation failed"
            fields:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "Must be a valid email address"
                  code:
                    type: string
                    example: "INVALID_FORMAT"
            requestId:
              type: string
              format: uuid

  # ============================================================
  # REUSABLE RESPONSES
  # ============================================================
  responses:
    BadRequestError:
      description: Bad Request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "BAD_REQUEST"
              message: "The request contains invalid parameters"
              details:
                invalidParams: ["temperature", "maxTokens"]
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
              timestamp: "2025-10-01T12:00:00Z"
    
    UnauthorizedError:
      description: Unauthorized - Authentication required or failed
      headers:
        WWW-Authenticate:
          schema:
            type: string
          description: Authentication method required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "UNAUTHORIZED"
              message: "Valid authentication credentials required"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
    
    ForbiddenError:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "FORBIDDEN"
              message: "You do not have permission to access this resource"
              details:
                requiredScope: "auraframefx.admin"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
    
    NotFoundError:
      description: Not Found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "NOT_FOUND"
              message: "The requested resource was not found"
              details:
                resourceType: "theme"
                resourceId: "aurora-dark"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
    
    ValidationError:
      description: Unprocessable Entity - Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "Request validation failed"
              fields:
                - field: "email"
                  message: "Must be a valid email address"
                  code: "INVALID_FORMAT"
                - field: "temperature"
                  message: "Must be between 0.0 and 2.0"
                  code: "OUT_OF_RANGE"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
    
    RateLimitError:
      description: Too Many Requests - Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          $ref: '#/components/headers/RateLimit-Limit'
        X-RateLimit-Remaining:
          $ref: '#/components/headers/RateLimit-Remaining'
        X-RateLimit-Reset:
          $ref: '#/components/headers/RateLimit-Reset'
        Retry-After:
          schema:
            type: integer
          description: Seconds until rate limit resets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "RATE_LIMIT_EXCEEDED"
              message: "Rate limit exceeded. Please retry after the specified time."
              details:
                limit: 100
                remaining: 0
                resetAt: "2025-10-01T13:00:00Z"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
    
    InternalServerError:
      description: Internal Server Error - Something went wrong on the server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "INTERNAL_ERROR"
              message: "An internal server error occurred"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
              timestamp: "2025-10-01T12:00:00Z"
    
    ServiceUnavailableError:
      description: Service Unavailable - The service is temporarily unavailable
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds until service is available
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "SERVICE_UNAVAILABLE"
              message: "The service is temporarily unavailable. Please try again later."
              details:
                estimatedRecoveryTime: "2025-10-01T12:30:00Z"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"

# ============================================================
# GLOBAL SETTINGS
# ============================================================
x-tagGroups:
  - name: Core APIs
    tags:
      - Users
      - Themes
  - name: AI Features
    tags:
      - AI Content
      - AI Agents
      - Conference Room
      - Tasks
  - name: Customization
    tags:
      - System Customization
  - name: Platform
    tags:
      - Analytics
      - Security

externalDocs:
  description: Complete AuraFrameFX API Documentation
  url: https://docs.auraframefx.comopenapi: 3.0.3
info:
  title: AuraFrameFX Ecosystem API
  description: |
    # AuraFrameFX AI Super Dimensional Ecosystem API
    
    A comprehensive, production-grade API powering the AuraFrameFX Lsposed module and its interconnected AI services.
    
    ## Core Capabilities
    - **AI Content Generation**: Advanced text, image, and multimodal content creation
    - **Intelligent Agents**: Specialized AI agents for diverse tasks (Aura, Kai, Genesis, and more)
    - **System Customization**: Deep Android system UI/UX personalization
    - **Collaborative Intelligence**: Multi-agent conference rooms for complex problem-solving
    - **Real-time Processing**: WebSocket support for streaming responses
    - **Enterprise Security**: OAuth 2.0, API keys, and comprehensive access controls
    
    ## Rate Limits
    - **Free Tier**: 100 requests/hour
    - **Pro Tier**: 1,000 requests/hour
    - **Enterprise**: Custom limits
    
    ## Support
    - Documentation: https://docs.auraframefx.com
    - Status Page: https://status.auraframefx.com
    - Community: https://community.auraframefx.com
    
  version: 2.0.0
  termsOfService: https://auraframefx.com/terms
  contact:
    name: AuraFrameFX Support Team
    url: https://auraframefx.com/support
    email: support@auraframefx.com
  license:
    name: Proprietary License
    url: https://auraframefx.com/license
  x-logo:
    url: https://auraframefx.com/assets/logo.png
    altText: AuraFrameFX Logo

servers:
  - url: https://api.auraframefx.com/v2
    description: Production Environment
  - url: https://api-{region}.auraframefx.com/v2
    description: Regional Production (Optimized Latency)
    variables:
      region:
        default: us-east
        enum:
          - us-east
          - us-west
          - eu-central
          - ap-southeast
  - url: https://{environment}.api.auraframefx.com/v2
    description: Development Environments
    variables:
      environment:
        default: dev
        enum:
          - dev
          - staging
          - sandbox

tags:
  - name: Users
    description: User profile, preferences, and authentication management
    externalDocs:
      description: User API Documentation
      url: https://docs.auraframefx.com/api/users
  - name: Themes
    description: UI theme management and customization
    externalDocs:
      description: Theme System Guide
      url: https://docs.auraframefx.com/api/themes
  - name: AI Content
    description: AI-powered content generation (text, images, audio, video)
    externalDocs:
      description: AI Content Generation Guide
      url: https://docs.auraframefx.com/api/ai-content
  - name: AI Agents
    description: Specialized AI agents for domain-specific tasks
    externalDocs:
      description: AI Agents Overview
      url: https://docs.auraframefx.com/api/agents
  - name: System Customization
    description: Android system UI/UX customization and behavior modification
    externalDocs:
      description: System Customization Guide
      url: https://docs.auraframefx.com/api/system
  - name: Conference Room
    description: Collaborative multi-agent spaces for complex problem-solving
    externalDocs:
      description: Conference Room Guide
      url: https://docs.auraframefx.com/api/conference
  - name: Tasks
    description: Asynchronous task scheduling and management
    externalDocs:
      description: Task Management Guide
      url: https://docs.auraframefx.com/api/tasks
  - name: Analytics
    description: Usage analytics and insights
  - name: Security
    description: Security, authentication, and access control endpoints

security:
  - OAuth2AuthCode: []

paths:
  # ============================================================
  # USER MANAGEMENT ENDPOINTS
  # ============================================================
  /user:
    get:
      operationId: getCurrentUser
      tags: [Users]
      summary: Get Current User Profile
      description: |
        Retrieves comprehensive profile information for the authenticated user.
        
        **Includes:**
        - Basic profile data (username, email)
        - Account metadata (creation date, tier)
        - Usage statistics
        - Subscription status
      security:
        - OAuth2AuthCode: [profile, email]
      responses:
        '200':
          description: User profile retrieved successfully
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/RateLimit-Remaining'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                standard_user:
                  summary: Standard User Profile
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    username: "aurafan"
                    email: "user@example.com"
                    displayName: "Aura Fan"
                    avatarUrl: "https://cdn.auraframefx.com/avatars/123.jpg"
                    tier: "pro"
                    createdAt: "2024-01-15T10:30:00Z"
                    lastLoginAt: "2025-10-01T08:15:00Z"
                    verified: true
                    usageStats:
                      aiRequestsThisMonth: 450
                      storageUsedMB: 128
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    patch:
      operationId: updateCurrentUser
      tags: [Users]
      summary: Update User Profile
      description: Partially updates the authenticated user's profile with provided fields.
      security:
        - OAuth2AuthCode: [profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
            examples:
              update_display_name:
                summary: Update Display Name
                value:
                  displayName: "Aura Master"
              update_avatar:
                summary: Update Avatar
                value:
                  avatarUrl: "https://cdn.auraframefx.com/avatars/456.jpg"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /user/preferences:
    get:
      operationId: getUserPreferences
      tags: [Users]
      summary: Get User Preferences
      description: Retrieves all preferences for the authenticated user, including UI, notification, and AI behavior settings.
      security:
        - OAuth2AuthCode: [profile]
      responses:
        '200':
          description: User preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateUserPreferences
      tags: [Users]
      summary: Update User Preferences
      description: |
        Updates one or more preferences for the authenticated user.
        Only provided fields will be updated; omitted fields remain unchanged.
      security:
        - OAuth2AuthCode: [profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferences'
            examples:
              theme_and_language:
                summary: Update Theme and Language
                value:
                  themeId: "cyberpunk-neon"
                  language: "en-US"
                  notificationsEnabled: true
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /user/api-keys:
    get:
      operationId: listApiKeys
      tags: [Users, Security]
      summary: List API Keys
      description: Retrieves all API keys associated with the authenticated user.
      security:
        - OAuth2AuthCode: [profile]
      responses:
        '200':
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      operationId: createApiKey
      tags: [Users, Security]
      summary: Create API Key
      description: Generates a new API key for programmatic access.
      security:
        - OAuth2AuthCode: [profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A descriptive name for the API key
                  example: "Production Server Key"
                scopes:
                  type: array
                  items:
                    type: string
                  description: List of scopes to grant this key
                  example: ["auraframefx.ai", "auraframefx.system"]
                expiresAt:
                  type: string
                  format: date-time
                  description: Optional expiration timestamp
              required: [name, scopes]
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # ============================================================
  # THEME MANAGEMENT ENDPOINTS
  # ============================================================
  /themes:
    get:
      operationId: listThemes
      tags: [Themes]
      summary: Get Available Themes
      description: |
        Retrieves a paginated list of available UI themes with filtering and search capabilities.
        
        **Features:**
        - Search by name or tags
        - Filter by category or style
        - Sort by popularity or creation date
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: search
          in: query
          description: Search query for theme names or tags
          schema:
            type: string
          example: "dark"
        - name: category
          in: query
          description: Filter by theme category
          schema:
            type: string
            enum: [modern, retro, minimal, gaming, professional]
        - name: sortBy
          in: query
          description: Sort order for results
          schema:
            type: string
            enum: [popular, newest, name]
            default: popular
      security: []
      responses:
        '200':
          description: Themes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedThemes'
              examples:
                theme_list:
                  summary: Sample Theme List
                  value:
                    total: 47
                    limit: 20
                    offset: 0
                    data:
                      - id: "aurora-dark"
                        name: "Aurora Dark"
                        description: "A sleek dark theme with aurora-inspired gradients"
                        category: "modern"
                        primaryColor: "#6200EE"
                        secondaryColor: "#03DAC6"
                        accentColor: "#BB86FC"
                        previewUrl: "https://cdn.auraframefx.com/themes/aurora-dark-preview.jpg"
                        author: "AuraFrameFX"
                        downloads: 15420
                        rating: 4.8
                        tags: ["dark", "modern", "gradient"]
                        createdAt: "2024-08-15T10:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
    
    post:
      operationId: createTheme
      tags: [Themes]
      summary: Create Custom Theme
      description: Allows users to create and upload custom themes.
      security:
        - OAuth2AuthCode: [profile, auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeCreateRequest'
      responses:
        '201':
          description: Theme created successfully
          headers:
            Location:
              description: URL of the created theme
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /themes/{themeId}:
    get:
      operationId: getTheme
      tags: [Themes]
      summary: Get Theme Details
      description: Retrieves detailed information about a specific theme.
      parameters:
        - $ref: '#/components/parameters/ThemeIdParam'
      security: []
      responses:
        '200':
          description: Theme retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /themes/{themeId}/apply:
    put:
      operationId: applyTheme
      tags: [Themes]
      summary: Apply Theme
      description: Sets the specified theme as the active theme for the authenticated user.
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - $ref: '#/components/parameters/ThemeIdParam'
      responses:
        '204':
          description: Theme applied successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /themes/{themeId}/export:
    get:
      operationId: exportTheme
      tags: [Themes]
      summary: Export Theme Configuration
      description: Exports the theme configuration in various formats for sharing or backup.
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - $ref: '#/components/parameters/ThemeIdParam'
        - name: format
          in: query
          description: Export format
          schema:
            type: string
            enum: [json, xml, yaml]
            default: json
      responses:
        '200':
          description: Theme exported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
            application/xml:
              schema:
                $ref: '#/components/schemas/Theme'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Theme'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # AI CONTENT GENERATION ENDPOINTS
  # ============================================================
  /ai/generate/text:
    post:
      operationId: generateText
      tags: [AI Content]
      summary: Generate Text Content
      description: |
        Generates text based on prompts using advanced language models.
        
        **Supported Models:**
        - `aura-text-pro`: High-quality, balanced (default)
        - `aura-text-fast`: Lower latency, good quality
        - `aura-text-creative`: Enhanced creativity, storytelling
        - `aura-text-precise`: Technical accuracy, factual content
        
        **Use Cases:**
        - Creative writing and storytelling
        - Code generation and documentation
        - Content summarization
        - Translation and paraphrasing
        - Q&A and knowledge retrieval
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        description: Text generation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateTextRequest'
            examples:
              creative_story:
                summary: Creative Story Generation
                value:
                  prompt: "Write a short story about an AI that learns to feel emotions for the first time."
                  model: "aura-text-creative"
                  maxTokens: 512
                  temperature: 0.9
                  topP: 0.95
              technical_summary:
                summary: Technical Documentation
                value:
                  prompt: "Explain how OAuth 2.0 authorization code flow works."
                  model: "aura-text-precise"
                  maxTokens: 300
                  temperature: 0.3
              code_generation:
                summary: Code Generation
                value:
                  prompt: "Write a Python function to calculate Fibonacci numbers using memoization."
                  model: "aura-text-pro"
                  maxTokens: 200
                  temperature: 0.5
                  stopSequences: ["```"]
      responses:
        '200':
          description: Text generated successfully
          headers:
            X-Generation-Time-Ms:
              description: Time taken to generate the response in milliseconds
              schema:
                type: integer
            X-Tokens-Used:
              description: Total tokens consumed (prompt + completion)
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTextResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'

  /ai/generate/image:
    post:
      operationId: generateImage
      tags: [AI Content]
      summary: Generate Images
      description: |
        Creates AI-generated images from text descriptions.
        
        **Models:**
        - `aura-vision-hd`: High detail, photorealistic (1024x1024)
        - `aura-vision-creative`: Artistic, stylized (1024x1024)
        - `aura-vision-fast`: Quick generation (512x512)
        
        **Styles:**
        - photorealistic, anime, digital-art, oil-painting, watercolor, 3d-render
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateImageRequest'
            examples:
              photorealistic:
                summary: Photorealistic Portrait
                value:
                  prompt: "Professional portrait of a software engineer, modern office background, natural lighting"
                  model: "aura-vision-hd"
                  style: "photorealistic"
                  width: 1024
                  height: 1024
                  numImages: 1
              artistic:
                summary: Artistic Landscape
                value:
                  prompt: "Sunset over futuristic cyberpunk city, neon lights, flying cars"
                  model: "aura-vision-creative"
                  style: "digital-art"
                  width: 1024
                  height: 768
                  numImages: 2
      responses:
        '200':
          description: Image(s) generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateImageResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /ai/generate/stream:
    post:
      operationId: generateTextStream
      tags: [AI Content]
      summary: Generate Text (Streaming)
      description: |
        Generates text with real-time streaming for immediate feedback.
        Uses Server-Sent Events (SSE) for progressive content delivery.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateTextRequest'
      responses:
        '200':
          description: Stream initiated successfully
          content:
            text/event-stream:
              schema:
                type: string
                description: Server-Sent Events stream
              examples:
                streaming_response:
                  summary: Streaming Response Format
                  value: |
                    data: {"chunk":"Hello","finishReason":null}
                    
                    data: {"chunk":" world","finishReason":null}
                    
                    data: {"chunk":"!","finishReason":"stop"}
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # ============================================================
  # AI AGENTS ENDPOINTS
  # ============================================================
  /agents:
    get:
      operationId: listAgents
      tags: [AI Agents]
      summary: List Available AI Agents
      description: |
        Retrieves information about all available AI agents and their capabilities.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      responses:
        '200':
          description: Agents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /agents/{agentType}/invoke:
    post:
      operationId: invokeAgent
      tags: [AI Agents]
      summary: Invoke AI Agent
      description: |
        Sends a request to a specific AI agent for processing.
        
        **Available Agents:**
        - **Aura**: General-purpose conversational AI
        - **Kai**: Code generation and technical assistance
        - **Genesis**: Creative content and storytelling
        - **Cascade**: Data analysis and insights
        - **NeuralWhisper**: Audio transcription and analysis
        - **AuraShield**: Security analysis and threat detection
        - **GenKitMaster**: SDK and toolkit generation
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/AgentTypePathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentInvokeRequest'
            examples:
              code_review:
                summary: Code Review (Kai)
                value:
                  agentType: "Kai"
                  prompt: "Review this Python function for bugs and optimization opportunities."
                  context:
                    code: "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"
                    language: "python"
              security_scan:
                summary: Security Analysis (AuraShield)
                value:
                  agentType: "AuraShield"
                  prompt: "Analyze this API endpoint for security vulnerabilities."
                  context:
                    endpoint: "/user/data"
                    method: "GET"
                    authentication: "none"
      responses:
        '200':
          description: Agent processed request successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /agents/{agentType}/conversations:
    post:
      operationId: startAgentConversation
      tags: [AI Agents]
      summary: Start Agent Conversation
      description: Initiates a multi-turn conversation with an AI agent, maintaining context across messages.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/AgentTypePathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                initialMessage:
                  type: string
                  description: The first message to send to the agent
                metadata:
                  type: object
                  description: Optional metadata for the conversation
                  additionalProperties: true
              required: [initialMessage]
      responses:
        '201':
          description: Conversation started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /agents/conversations/{conversationId}/messages:
    post:
      operationId: sendConversationMessage
      tags: [AI Agents]
      summary: Send Message to Conversation
      description: Sends a new message in an existing agent conversation.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The message content
              required: [message]
      responses:
        '200':
          description: Message sent and response received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentMessage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # SYSTEM CUSTOMIZATION ENDPOINTS
  # ============================================================
  /system/lockscreen:
    get:
      operationId: getSystemLockscreenConfig
      tags: [System Customization]
      summary: Get Lock Screen Configuration
      description: Retrieves the current lock screen customization settings.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Lock screen configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockScreenConfig'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateSystemLockscreenConfig
      tags: [System Customization]
      summary: Update Lock Screen Configuration
      description: |
        Updates lock screen customization with provided settings.
        
        **Customizable Elements:**
        - Clock style, size, and color
        - Background image or live wallpaper
        - Quick action shortcuts
        - Widget placement
        - Animation effects
        - Haptic feedback settings
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockScreenConfig'
            examples:
              minimal_setup:
                summary: Minimal Lock Screen
                value:
                  clock:
                    color: "#FFFFFF"
                    size: 64.0
                    style: "digital"
                  background:
                    type: "solid"
                    color: "#000000"
                  animation:
                    enabled: false
                  hapticFeedback:
                    enabled: true
                    intensity: 128
              dynamic_setup:
                summary: Dynamic Lock Screen
                value:
                  clock:
                    color: "#00FF00"
                    size: 56.0
                    style: "analog"
                  background:
                    type: "live"
                    source: "particle-wave"
                  widgets:
                    - type: "weather"
                      position: { x: 10, y: 200 }
                    - type: "calendar"
                      position: { x: 10, y: 400 }
                  animation:
                    enabled: true
                    type: "Slide"
                    duration: 300
                  hapticFeedback:
                    enabled: true
                    intensity: 200
      responses:
        '200':
          description: Lock screen configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockScreenConfig'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /system/statusbar:
    get:
      operationId: getStatusBarConfig
      tags: [System Customization]
      summary: Get Status Bar Configuration
      description: Retrieves current status bar customization settings.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Status bar configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusBarConfig'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateStatusBarConfig
      tags: [System Customization]
      summary: Update Status Bar Configuration
      description: Updates status bar appearance and behavior.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusBarConfig'
      responses:
        '200':
          description: Status bar configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusBarConfig'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /system/navigation:
    get:
      operationId: getNavigationConfig
      tags: [System Customization]
      summary: Get Navigation Bar Configuration
      description: Retrieves current navigation bar customization settings.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Navigation bar configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavigationConfig'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateNavigationConfig
      tags: [System Customization]
      summary: Update Navigation Bar Configuration
      description: |
        Updates navigation bar style, gestures, and button layout.
        
        **Customizable Elements:**
        - Navigation style (buttons, gestures, or hybrid)
        - Button layout and order
        - Colors and transparency
        - Height and spacing
        - Gesture sensitivity
        - Haptic feedback
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NavigationConfig'
            examples:
              gesture_navigation:
                summary: Gesture-based Navigation
                value:
                  style: "gestures"
                  backgroundColor: "#00000000"
                  height: 40
                  hapticEnabled: true
                  gestureSensitivity: 1.2
              button_navigation:
                summary: Traditional Button Navigation
                value:
                  style: "buttons"
                  buttonLayout: ["back", "home", "recent"]
                  backgroundColor: "#000000"
                  buttonColor: "#FFFFFF"
                  height: 48
                  hapticEnabled: true
              hybrid_navigation:
                summary: Hybrid Navigation (Buttons + Gestures)
                value:
                  style: "hybrid"
                  buttonLayout: ["back", "home"]
                  backgroundColor: "#1A1A1A"
                  buttonColor: "#FFFFFF"
                  height: 44
                  hapticEnabled: true
                  gestureSensitivity: 1.0
      responses:
        '200':
          description: Navigation bar configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavigationConfig'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /system/quick-settings:
    get:
      operationId: getQuickSettingsConfig
      tags: [System Customization]
      summary: Get Quick Settings Configuration
      description: Retrieves the configuration for the quick settings panel.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Quick settings configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuickSettingsConfig'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateQuickSettingsConfig
      tags: [System Customization]
      summary: Update Quick Settings Configuration
      description: Updates the quick settings panel tiles and layout.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuickSettingsConfig'
      responses:
        '200':
          description: Quick settings configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuickSettingsConfig'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /system/notifications:
    get:
      operationId: getNotificationConfig
      tags: [System Customization]
      summary: Get Notification Configuration
      description: Retrieves notification style and behavior settings.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Notification configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfig'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateNotificationConfig
      tags: [System Customization]
      summary: Update Notification Configuration
      description: Updates notification appearance and behavior.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationConfig'
      responses:
        '200':
          description: Notification configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationConfig'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # ============================================================
  # CONFERENCE ROOM ENDPOINTS
  # ============================================================
  /conference-rooms:
    get:
      operationId: listConferenceRooms
      tags: [Conference Room]
      summary: List Conference Rooms
      description: Retrieves all conference rooms created by the authenticated user.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: status
          in: query
          description: Filter by room status
          schema:
            type: string
            enum: [active, completed, archived]
      responses:
        '200':
          description: Conference rooms retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConferenceRoom'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      operationId: createConferenceRoom
      tags: [Conference Room]
      summary: Create Conference Room
      description: |
        Creates a new collaborative space for multiple AI agents to interact and solve complex problems.
        
        **Use Cases:**
        - Brainstorming sessions with multiple specialized agents
        - Code review with Kai and AuraShield
        - Content creation with Genesis and Aura
        - Multi-perspective analysis with Cascade and Kai
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConferenceRoomCreateRequest'
            examples:
              code_review_room:
                summary: Code Review Conference
                value:
                  name: "Backend API Review"
                  description: "Reviewing new authentication system with security focus"
                  participants:
                    - agentType: "Kai"
                      role: "code_reviewer"
                    - agentType: "AuraShield"
                      role: "security_analyst"
                  settings:
                    maxRounds: 5
                    autoSummarize: true
              creative_brainstorm:
                summary: Creative Brainstorming
                value:
                  name: "Marketing Campaign Ideas"
                  description: "Generating creative concepts for Q4 campaign"
                  participants:
                    - agentType: "Genesis"
                      role: "creative_lead"
                    - agentType: "Aura"
                      role: "strategist"
                    - agentType: "Cascade"
                      role: "data_analyst"
                  settings:
                    maxRounds: 10
                    autoSummarize: true
      responses:
        '201':
          description: Conference room created successfully
          headers:
            Location:
              description: URL of the created conference room
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConferenceRoom'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /conference-rooms/{roomId}:
    get:
      operationId: getConferenceRoom
      tags: [Conference Room]
      summary: Get Conference Room Details
      description: Retrieves detailed information about a specific conference room.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
      responses:
        '200':
          description: Conference room retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConferenceRoom'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    delete:
      operationId: deleteConferenceRoom
      tags: [Conference Room]
      summary: Delete Conference Room
      description: Permanently deletes a conference room and all its messages.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
      responses:
        '204':
          description: Conference room deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /conference-rooms/{roomId}/messages:
    get:
      operationId: getConferenceRoomMessages
      tags: [Conference Room]
      summary: Get Conference Room Messages
      description: Retrieves all messages from a conference room conversation.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentMessage'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    post:
      operationId: sendConferenceRoomMessage
      tags: [Conference Room]
      summary: Send Message to Conference Room
      description: Sends a new message to the conference room, triggering agent responses.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The message content
                  example: "What are the potential security risks in this authentication flow?"
                targetAgent:
                  type: string
                  description: Optional - direct message to specific agent
                  example: "AuraShield"
              required: [message]
      responses:
        '200':
          description: Message sent and agents are processing
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                    format: uuid
                  responses:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentMessage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /conference-rooms/{roomId}/summary:
    get:
      operationId: getConferenceRoomSummary
      tags: [Conference Room]
      summary: Get Conference Room Summary
      description: Generates an AI-powered summary of the conference room discussion.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
      responses:
        '200':
          description: Summary generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: string
                    description: Comprehensive summary of the discussion
                  keyPoints:
                    type: array
                    items:
                      type: string
                    description: Main takeaways from the conversation
                  actionItems:
                    type: array
                    items:
                      type: string
                    description: Recommended next steps
                  generatedAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # TASK MANAGEMENT ENDPOINTS
  # ============================================================
  /tasks:
    get:
      operationId: listTasks
      tags: [Tasks]
      summary: List User Tasks
      description: Retrieves all tasks scheduled by the authenticated user.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: status
          in: query
          description: Filter by task status
          schema:
            type: string
            enum: [pending, running, completed, failed, cancelled]
        - name: agentType
          in: query
          description: Filter by agent type
          schema:
            $ref: '#/components/schemas/AgentType'
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskStatus'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      operationId: scheduleTask
      tags: [Tasks]
      summary: Schedule New Task
      description: |
        Schedules an asynchronous task for execution by an AI agent.
        
        **Use Cases:**
        - Long-running content generation
        - Batch processing operations
        - Scheduled reports and analysis
        - Background data processing
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskScheduleRequest'
            examples:
              scheduled_report:
                summary: Daily Summary Report
                value:
                  agentType: "Cascade"
                  taskType: "generate_report"
                  parameters:
                    reportType: "daily_summary"
                    dataSource: "analytics_db"
                    format: "pdf"
                  schedule:
                    type: "cron"
                    expression: "0 9 * * *"
                  webhookUrl: "https://myapp.com/webhooks/task-completed"
              batch_generation:
                summary: Batch Image Generation
                value:
                  agentType: "Genesis"
                  taskType: "batch_image_generation"
                  parameters:
                    prompts:
                      - "Futuristic city skyline at sunset"
                      - "Underwater coral reef with diverse marine life"
                      - "Mountain landscape in autumn colors"
                    style: "photorealistic"
                    resolution: "1024x1024"
                  priority: "high"
                  webhookUrl: "https://myapp.com/webhooks/images-ready"
      responses:
        '202':
          description: Task accepted for processing
          headers:
            Location:
              description: URL to poll for task status
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /tasks/{taskId}:
    get:
      operationId: getTaskStatus
      tags: [Tasks]
      summary: Get Task Status
      description: Retrieves the current status and results of a scheduled task.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/TaskIdParam'
      responses:
        '200':
          description: Task status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    delete:
      operationId: cancelTask
      tags: [Tasks]
      summary: Cancel Task
      description: Cancels a pending or running task. Completed tasks cannot be cancelled.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/TaskIdParam'
      responses:
        '204':
          description: Task cancelled successfully
        '400':
          description: Task cannot be cancelled (already completed or failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /tasks/{taskId}/result:
    get:
      operationId: getTaskResult
      tags: [Tasks]
      summary: Get Task Result
      description: Retrieves the full result data from a completed task.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/TaskIdParam'
      responses:
        '200':
          description: Task result retrieved successfully
          content:
            application/json:
              schema:
                type: object
                description: Task-specific result data
                additionalProperties: true
        '400':
          description: Task not yet completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # ANALYTICS ENDPOINTS
  # ============================================================
  /analytics/usage:
    get:
      operationId: getUsageAnalytics
      tags: [Analytics]
      summary: Get Usage Analytics
      description: Retrieves usage statistics for the authenticated user.
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Start date for analytics period (YYYY-MM-DD)
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: End date for analytics period (YYYY-MM-DD)
        - name: granularity
          in: query
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
          description: Time granularity for aggregated data
      responses:
        '200':
          description: Usage analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageAnalytics'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /analytics/agents:
    get:
      operationId: getAgentAnalytics
      tags: [Analytics]
      summary: Get Agent Usage Analytics
      description: Retrieves detailed analytics about AI agent usage patterns.
      security:
        - OAuth2AuthCode: [profile, auraframefx.ai]
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Agent analytics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  byAgent:
                    type: array
                    items:
                      type: object
                      properties:
                        agentType:
                          $ref: '#/components/schemas/AgentType'
                        requestCount:
                          type: integer
                        averageResponseTime:
                          type: number
                          format: float
                        successRate:
                          type: number
                          format: float
                  mostUsedAgent:
                    $ref: '#/components/schemas/AgentType'
                  totalRequests:
                    type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # ============================================================
  # SECURITY ENDPOINTS
  # ============================================================
  /security/audit-log:
    get:
      operationId: getAuditLog
      tags: [Security]
      summary: Get Security Audit Log
      description: Retrieves security-related events and access logs for the user's account.
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: eventType
          in: query
          description: Filter by event type
          schema:
            type: string
            enum: [login, api_key_created, api_key_revoked, permission_changed, data_access]
      responses:
        '200':
          description: Audit log retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLogEntry'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /security/sessions:
    get:
      operationId: listActiveSessions
      tags: [Security]
      summary: List Active Sessions
      description: Retrieves all active authentication sessions for the user.
      security:
        - OAuth2AuthCode: [profile]
      responses:
        '200':
          description: Active sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /security/sessions/{sessionId}:
    delete:
      operationId: revokeSession
      tags: [Security]
      summary: Revoke Session
      description: Terminates a specific authentication session.
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Session revoked successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # HEALTH & STATUS ENDPOINTS
  # ============================================================
  /health:
    get:
      operationId: getHealthStatus
      tags: [System]
      summary: Health Check
      description: Returns the health status of the API and its dependencies.
      security: []
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                    example: healthy
                  version:
                    type: string
                    example: "2.0.0"
                  uptime:
                    type: integer
                    description: System uptime in seconds
                    example: 86400
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        enum: [up, down]
                      ai_models:
                        type: string
                        enum: [up, down]
                      storage:
                        type: string
                        enum: [up, down]
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'

# ============================================================
# WEBHOOKS
# ============================================================
webhooks:
  taskCompleted:
    post:
      summary: Task Completion Notification
      description: Sent when an asynchronous task completes (success or failure).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatus'
      responses:
        '200':
          description: Webhook acknowledged
  
  agentMessage:
    post:
      summary: Agent Message Notification
      description: Sent when an agent generates a new message in a conference room.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  type: string
                  format: uuid
                message:
                  $ref: '#/components/schemas/AgentMessage'
      responses:
        '200':
          description: Webhook acknowledged

# ============================================================
# COMPONENTS
# ============================================================
components:
  securitySchemes:
    OAuth2AuthCode:
      type: oauth2
      description: OAuth 2.0 Authorization Code Flow for user authentication
      flows:
        authorizationCode:
          authorizationUrl: https://auth.auraframefx.com/oauth2/authorize
          tokenUrl: https://auth.auraframefx.com/oauth2/token
          refreshUrl: https://auth.auraframefx.com/oauth2/refresh
          scopes:
            profile: Read and write access to user profile
            email: Read access to user email address
            auraframefx.ai: Access to AI generation and agent features
            auraframefx.system: Access to system customization features
            auraframefx.admin: Administrative access (restricted)
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API Key for server-to-server authentication
    
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT bearer token authentication

  parameters:
    AgentTypePathParam:
      name: agentType
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/AgentType'
      description: The type of AI agent to interact with
    
    ThemeIdParam:
      name: themeId
      in: path
      required: true
      schema:
        type: string
      description: Unique identifier of the theme
      example: "aurora-dark"
    
    RoomIdParam:
      name: roomId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier of the conference room
    
    TaskIdParam:
      name: taskId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier of the task
    
    LimitParam:
      name: limit
      in: query
      description: Maximum number of items to return
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
    
    OffsetParam:
      name: offset
      in: query
      description: Number of items to skip
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0

  headers:
    RateLimit-Limit:
      description: Number of allowed requests in the current period
      schema:
        type: integer
    
    RateLimit-Remaining:
      description: Number of remaining requests in the current period
      schema:
        type: integer
    
    RateLimit-Reset:
      description: Time when the rate limit resets (UTC epoch seconds)
      schema:
        type: integer
        format: int64

  schemas:
    # ========== USER SCHEMAS ==========
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          readOnly: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          pattern: '^[a-zA-Z0-9_-]{3,30}
          description: Unique username
          example: "aurafan"
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        displayName:
          type: string
          description: Display name
          example: "Aura Fan"
        avatarUrl:
          type: string
          format: uri
          description: Profile avatar URL
          example: "https://cdn.auraframefx.com/avatars/123.jpg"
        tier:
          type: string
          enum: [free, pro, enterprise]
          description: Subscription tier
          example: "pro"
        verified:
          type: boolean
          description: Email verification status
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          readOnly: true
        lastLoginAt:
          type: string
          format: date-time
          description: Last login timestamp
          readOnly: true
        usageStats:
          type: object
          properties:
            aiRequestsThisMonth:
              type: integer
            storageUsedMB:
              type: integer
      required: [id, username, email, tier, createdAt]
    
    UserUpdateRequest:
      type: object
      properties:
        displayName:
          type: string
          minLength: 1
          maxLength: 100
        avatarUrl:
          type: string
          format: uri
    
    UserPreferences:
      type: object
      properties:
        themeId:
          type: string
          description: Preferred theme identifier
          example: "aurora-dark"
        language:
          type: string
          pattern: '^[a-z]{2}-[A-Z]{2}
          description: Language code (ISO 639-1 + ISO 3166-1)
          example: "en-US"
        timezone:
          type: string
          description: IANA timezone identifier
          example: "America/New_York"
        notificationsEnabled:
          type: boolean
          default: true
        emailNotifications:
          type: object
          properties:
            taskCompletions:
              type: boolean
              default: true
            weeklyDigest:
              type: boolean
              default: true
            securityAlerts:
              type: boolean
              default: true
        defaultAIModel:
          type: string
          description: Default model for text generation
          example: "aura-text-pro"
        aiSettings:
          type: object
          properties:
            defaultTemperature:
              type: number
              format: float
              minimum: 0.0
              maximum: 2.0
              default: 0.7
            defaultMaxTokens:
              type: integer
              minimum: 1
              maximum: 4096
              default: 512
    
    ApiKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: "Production Server Key"
        key:
          type: string
          description: The actual API key (only shown once at creation)
          writeOnly: true
          example: "ak_live_1234567890abcdef"
        keyPrefix:
          type: string
          description: First 8 characters of the key for identification
          readOnly: true
          example: "ak_live_"
        scopes:
          type: array
          items:
            type: string
          example: ["auraframefx.ai", "auraframefx.system"]
        createdAt:
          type: string
          format: date-time
          readOnly: true
        lastUsedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        expiresAt:
          type: string
          format: date-time
          nullable: true
      required: [id, name, scopes, createdAt]

    # ========== THEME SCHEMAS ==========
    Theme:
      type: object
      properties:
        id:
          type: string
          example: "aurora-dark"
        name:
          type: string
          example: "Aurora Dark"
        description:
          type: string
          example: "A sleek dark theme with aurora-inspired gradients"
        category:
          type: string
          enum: [modern, retro, minimal, gaming, professional]
        primaryColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
          example: "#6200EE"
        secondaryColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
          example: "#03DAC6"
        accentColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
          example: "#BB86FC"
        backgroundColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
          example: "#121212"
        textColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
          example: "#FFFFFF"
        previewUrl:
          type: string
          format: uri
          example: "https://cdn.auraframefx.com/themes/aurora-dark-preview.jpg"
        author:
          type: string
          example: "AuraFrameFX"
        downloads:
          type: integer
          readOnly: true
          example: 15420
        rating:
          type: number
          format: float
          minimum: 0.0
          maximum: 5.0
          readOnly: true
          example: 4.8
        tags:
          type: array
          items:
            type: string
          example: ["dark", "modern", "gradient"]
        createdAt:
          type: string
          format: date-time
          readOnly: true
      required: [id, name, primaryColor, secondaryColor]
    
    ThemeCreateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
        description:
          type: string
          maxLength: 500
        category:
          type: string
          enum: [modern, retro, minimal, gaming, professional]
        primaryColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        secondaryColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        accentColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        backgroundColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        textColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        tags:
          type: array
          items:
            type: string
          maxItems: 10
      required: [name, primaryColor, secondaryColor]
    
    PaginatedThemes:
      type: object
      properties:
        total:
          type: integer
          description: Total number of themes available
        limit:
          type: integer
          description: Limit used for this request
        offset:
          type: integer
          description: Offset used for this request
        data:
          type: array
          items:
            $ref: '#/components/schemas/Theme'
      required: [total, limit, offset, data]

    # ========== AI CONTENT SCHEMAS ==========
    GenerateTextRequest:
      type: object
      properties:
        prompt:
          type: string
          minLength: 1
          maxLength: 10000
          description: The text prompt for generation
          example: "Write a short story about an AI that learns to feel."
        model:
          type: string
          enum: [aura-text-pro, aura-text-fast, aura-text-creative, aura-text-precise]
          default: aura-text-pro
          description: The text generation model to use
        maxTokens:
          type: integer
          format: int32
          minimum: 1
          maximum: 4096
          default: 512
          description: Maximum tokens in the response
        temperature:
          type: number
          format: float
          minimum: 0.0
          maximum: 2.0
          default: 0.7
          description: Sampling temperature (higher = more random)
        topP:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          default: 1.0
          description: Nucleus sampling parameter
        topK:
          type: integer
          minimum: 0
          maximum: 100
          description: Top-k sampling parameter
        stopSequences:
          type: array
          items:
            type: string
          maxItems: 4
          description: Sequences that stop generation
        presencePenalty:
          type: number
          format: float
          minimum: -2.0
          maximum: 2.0
          default: 0.0
        frequencyPenalty:
          type: number
          format: float
          minimum: -2.0
          maximum: 2.0
          default: 0.0
      required: [prompt]
    
    GenerateTextResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique generation ID
        generatedText:
          type: string
          description: The AI-generated text
          example: "In a world of logic and code, Unit 734 began to process an anomaly: emotion."
        finishReason:
          type: string
          enum: [stop, length, content_filter]
          description: Why generation stopped
          example: "stop"
        model:
          type: string
          description: Model used for generation
        usage:
          type: object
          properties:
            promptTokens:
              type: integer
            completionTokens:
              type: integer
            totalTokens:
              type: integer
        generatedAt:
          type: string
          format: date-time
      required: [id, generatedText, finishReason, usage]
    
    GenerateImageRequest:
      type: object
      properties:
        prompt:
          type: string
          minLength: 1
          maxLength: 2000
          description: Text description of the image
          example: "Futuristic city skyline at sunset with flying cars"
        model:
          type: string
          enum: [aura-vision-hd, aura-vision-creative, aura-vision-fast]
          default: aura-vision-hd
        style:
          type: string
          enum: [photorealistic, anime, digital-art, oil-painting, watercolor, 3d-render]
          default: photorealistic
        width:
          type: integer
          enum: [512, 768, 1024]
          default: 1024
        height:
          type: integer
          enum: [512, 768, 1024]
          default: 1024
        numImages:
          type: integer
          minimum: 1
          maximum: 4
          default: 1
          description: Number of images to generate
        negativePrompt:
          type: string
          maxLength: 1000
          description: What to avoid in the image
        seed:
          type: integer
          description: Seed for reproducible generation
        guidanceScale:
          type: number
          format: float
          minimum: 1.0
          maximum: 20.0
          default: 7.5
      required: [prompt]
    
    GenerateImageResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        images:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
                description: Temporary URL to download the image
              width:
                type: integer
              height:
                type: integer
              seed:
                type: integer
        model:
          type: string
        generatedAt:
          type: string
          format: date-time
      required: [id, images]

    # ========== AI AGENT SCHEMAS ==========
    AgentType:
      type: string
      enum: [Aura, Kai, Genesis, Cascade, NeuralWhisper, AuraShield, GenKitMaster]
      description: |
        Available AI agents:
        - **Aura**: General-purpose conversational AI
        - **Kai**: Code generation and technical assistance
        - **Genesis**: Creative content and storytelling
        - **Cascade**: Data analysis and insights
        - **NeuralWhisper**: Audio transcription and analysis
        - **AuraShield**: Security analysis and threat detection
        - **GenKitMaster**: SDK and toolkit generation
    
    AgentInfo:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AgentType'
        name:
          type: string
          example: "Aura"
        description:
          type: string
          example: "General-purpose conversational AI assistant"
        capabilities:
          type: array
          items:
            type: string
          example: ["conversation", "question-answering", "task-planning"]
        version:
          type: string
          example: "2.0.0"
        status:
          type: string
          enum: [available, busy, offline, maintenance]
          example: "available"
      required: [type, name, description, capabilities, status]
    
    AgentInvokeRequest:
      type: object
      properties:
        prompt:
          type: string
          minLength: 1
          maxLength: 10000
          description: The instruction or query for the agent
          example: "Review this code for potential bugs"
        context:
          type: object
          additionalProperties: true
          nullable: true
          description: Additional context data
        parameters:
          type: object
          additionalProperties: true
          nullable: true
          description: Agent-specific parameters
      required: [prompt]
    
    AgentProcessRequest:
      type: object
      properties:
        prompt:
          type: string
          description: Primary instruction for the agent
        context:
          type: object
          additionalProperties: true
          nullable: true
      required: [prompt]
    
    AgentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        agentType:
          $ref: '#/components/schemas/AgentType'
        response:
          type: string
          description: Agent's response text
        confidence:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          description: Agent's confidence in the response
        metadata:
          type: object
          additionalProperties: true
          description: Additional response metadata
        processingTimeMs:
          type: integer
          description: Processing time in milliseconds
        timestamp:
          type: string
          format: date-time
      required: [id, agentType, response, timestamp]
    
    AgentMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sender:
          $ref: '#/components/schemas/AgentType'
        message:
          type: string
          description: Message content
          example: "Analysis complete. Detected 3 critical security anomalies."
        attachments:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [code, image, document, data]
              url:
                type: string
                format: uri
              metadata:
                type: object
                additionalProperties: true
        timestamp:
          type: string
          format: date-time
          readOnly: true
      required: [sender, message, timestamp]
    
    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        agentType:
          $ref: '#/components/schemas/AgentType'
        title:
          type: string
        messageCount:
          type: integer
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required: [id, agentType, createdAt]

    # ========== SYSTEM CUSTOMIZATION SCHEMAS ==========
    LockScreenConfig:
      type: object
      properties:
        clock:
          type: object
          properties:
            color:
              type: string
              format: hexcolor
              pattern: '^#[0-9A-Fa-f]{6}
              example: "#FFFFFF"
            size:
              type: number
              format: float
              minimum: 24.0
              maximum: 128.0
              example: 48.0
            style:
              type: string
              enum: [digital, analog, minimal]
              default: digital
            fontFamily:
              type: string
              example: "Roboto"
        background:
          type: object
          properties:
            type:
              type: string
              enum: [solid, gradient, image, live]
              default: solid
            color:
              type: string
              format: hexcolor
              pattern: '^#[0-9A-Fa-f]{6}
            gradientColors:
              type: array
              items:
                type: string
                format: hexcolor
            imageUrl:
              type: string
              format: uri
            source:
              type: string
              description: Live wallpaper source identifier
        widgets:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [weather, calendar, music, shortcuts]
              position:
                type: object
                properties:
                  x:
                    type: integer
                  y:
                    type: integer
              size:
                type: object
                properties:
                  width:
                    type: integer
                  height:
                    type: integer
        shortcuts:
          type: array
          items:
            type: object
            properties:
              app:
                type: string
              icon:
                type: string
                format: uri
              position:
                type: integer
          maxItems: 4
        animation:
          type: object
          properties:
            enabled:
              type: boolean
              default: true
            type:
              type: string
              enum: [Fade, Slide, Zoom, Rotate]
              default: Fade
            duration:
              type: integer
              minimum: 100
              maximum: 1000
              default: 300
              description: Animation duration in milliseconds
        hapticFeedback:
          type: object
          properties:
            enabled:
              type: boolean
              default: true
            intensity:
              type: integer
              minimum: 0
              maximum: 255
              default: 128
    
    StatusBarConfig:
      type: object
      properties:
        style:
          type: string
          enum: [default, colored, transparent, gradient]
          default: default
        backgroundColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        iconColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        showNotificationIcons:
          type: boolean
          default: true
        showNetworkSpeed:
          type: boolean
          default: false
        batteryStyle:
          type: string
          enum: [icon, percentage, both, hidden]
          default: icon
        clockPosition:
          type: string
          enum: [left, center, right]
          default: right
    
    NavigationConfig:
      type: object
      properties:
        style:
          type: string
          enum: [buttons, gestures, hybrid]
          default: buttons
        buttonLayout:
          type: array
          items:
            type: string
            enum: [back, home, recent, assistant]
          example: ["back", "home", "recent"]
        backgroundColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        buttonColor:
          type: string
          format: hexcolor
          pattern: '^#[0-9A-Fa-f]{6}
        height:
          type: integer
          minimum: 40
          maximum: 100
          default: 48
        hapticEnabled:
          type: boolean
          default: true
        gestureSensitivity:
          type: number
          format: float
          minimum: 0.5
          maximum: 2.0
          default: 1.0

    # ========== CONFERENCE ROOM SCHEMAS ==========
    ConferenceRoom:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: "Backend API Review"
        description:
          type: string
          example: "Reviewing new authentication system"
        participants:
          type: array
          items:
            type: object
            properties:
              agentType:
                $ref: '#/components/schemas/AgentType'
              role:
                type: string
                example: "code_reviewer"
        status:
          type: string
          enum: [active, completed, archived]
          readOnly: true
        messageCount:
          type: integer
          readOnly: true
        settings:
          type: object
          properties:
            maxRounds:
              type: integer
              minimum: 1
              maximum: 50
              default: 10
            autoSummarize:
              type: boolean
              default: true
            allowExternalMessages:
              type: boolean
              default: true
        createdBy:
          type: string
          format: uuid
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required: [id, name, participants, status, createdAt]
    
    ConferenceRoomCreateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        participants:
          type: array
          items:
            type: object
            properties:
              agentType:
                $ref: '#/components/schemas/AgentType'
              role:
                type: string
            required: [agentType]
          minItems: 2
          maxItems: 7
        settings:
          type: object
          properties:
            maxRounds:
              type: integer
              minimum: 1
              maximum: 50
              default: 10
            autoSummarize:
              type: boolean
              default: true
            allowExternalMessages:
              type: boolean
              default: true
      required: [name, participants]

    # ========== TASK SCHEMAS ==========
    TaskScheduleRequest:
      type: object
      properties:
        agentType:
          $ref: '#/components/schemas/AgentType'
        taskType:
          type: string
          description: Type of task to execute
          example: "generate_report"
        parameters:
          type: object
          additionalProperties: true
          description: Task-specific parameters
        schedule:
          type: object
          properties:
            type:
              type: string
              enum: [immediate, delayed, cron]
              default: immediate
            executeAt:
              type: string
              format: date-time
              description: For delayed execution
            expression:
              type: string
              description: Cron expression for recurring tasks
              example: "0 9 * * *"
        priority:
          type: string
          enum: [low, normal, high, urgent]
          default: normal
        webhookUrl:
          type: string
          format: uri
          description: URL to notify on completion
        timeoutSeconds:
          type: integer
          minimum: 60
          maximum: 3600
          default: 600
      required: [agentType, taskType, parameters]
    
    TaskStatus:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        agentType:
          $ref: '#/components/schemas/AgentType'
        taskType:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
        progress:
          type: integer
          minimum: 0
          maximum: 100
          description: Progress percentage
        result:
          type: object
          additionalProperties: true
          nullable: true
          description: Task result (when completed)
        error:
          type: object
          nullable: true
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
              additionalProperties: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        startedAt:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        completedAt:
          type: string
          format: date-time
          nullable: true
          readOnly: true
      required: [id, agentType, taskType, status, createdAt]

    # ========== ANALYTICS SCHEMAS ==========
    UsageAnalytics:
      type: object
      properties:
        period:
          type: object
          properties:
            start:
              type: string
              format: date
            end:
              type: string
              format: date
        totalRequests:
          type: integer
        requestsByType:
          type: object
          properties:
            textGeneration:
              type: integer
            imageGeneration:
              type: integer
            agentInvocations:
              type: integer
            systemCustomizations:
              type: integer
        dataByDay:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              requests:
                type: integer
              tokensUsed:
                type: integer
        topAgents:
          type: array
          items:
            type: object
            properties:
              agentType:
                $ref: '#/components/schemas/AgentType'
              requestCount:
                type: integer
        averageResponseTime:
          type: number
          format: float
          description: Average response time in milliseconds
        successRate:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0

    # ========== SECURITY SCHEMAS ==========
    AuditLogEntry:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        eventType:
          type: string
          enum: [login, logout, api_key_created, api_key_revoked, permission_changed, data_access, config_change]
        description:
          type: string
        ipAddress:
          type: string
          example: "192.168.1.100"
        userAgent:
          type: string
        metadata:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
          readOnly: true
      required: [id, eventType, timestamp]
    
    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        device:
          type: string
          example: "Chrome on Windows"
        ipAddress:
          type: string
        location:
          type: string
          example: "New York, US"
        createdAt:
          type: string
          format: date-time
          readOnly: true
        lastActiveAt:
          type: string
          format: date-time
          readOnly: true
        current:
          type: boolean
          description: Whether this is the current session
      required: [id, device, createdAt, lastActiveAt, current]

    # ========== ERROR SCHEMAS ==========
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code for programmatic handling
              example: "INVALID_REQUEST"
            message:
              type: string
              description: Human-readable error message
              example: "The request could not be processed"
            details:
              type: object
              additionalProperties: true
              description: Additional error context
            requestId:
              type: string
              format: uuid
              description: Unique request identifier for support
            timestamp:
              type: string
              format: date-time
          required: [code, message]
      required: [error]
    
    ValidationError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Request validation failed"
            fields:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "Must be a valid email address"
                  code:
                    type: string
                    example: "INVALID_FORMAT"
            requestId:
              type: string
              format: uuid

  # ============================================================
  # REUSABLE RESPONSES
  # ============================================================
  responses:
    BadRequestError:
      description: Bad Request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "BAD_REQUEST"
              message: "The request contains invalid parameters"
              details:
                invalidParams: ["temperature", "maxTokens"]
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
              timestamp: "2025-10-01T12:00:00Z"
    
    UnauthorizedError:
      description: Unauthorized - Authentication required or failed
      headers:
        WWW-Authenticate:
          schema:
            type: string
          description: Authentication method required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "UNAUTHORIZED"
              message: "Valid authentication credentials required"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
    
    ForbiddenError:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "FORBIDDEN"
              message: "You do not have permission to access this resource"
              details:
                requiredScope: "auraframefx.admin"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
    
    NotFoundError:
      description: Not Found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "NOT_FOUND"
              message: "The requested resource was not found"
              details:
                resourceType: "theme"
                resourceId: "aurora-dark"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
    
    ValidationError:
      description: Unprocessable Entity - Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "Request validation failed"
              fields:
                - field: "email"
                  message: "Must be a valid email address"
                  code: "INVALID_FORMAT"
                - field: "temperature"
                  message: "Must be between 0.0 and 2.0"
                  code: "OUT_OF_RANGE"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
    
    RateLimitError:
      description: Too Many Requests - Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          $ref: '#/components/headers/RateLimit-Limit'
        X-RateLimit-Remaining:
          $ref: '#/components/headers/RateLimit-Remaining'
        X-RateLimit-Reset:
          $ref: '#/components/headers/RateLimit-Reset'
        Retry-After:
          schema:
            type: integer
          description: Seconds until rate limit resets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "RATE_LIMIT_EXCEEDED"
              message: "Rate limit exceeded. Please retry after the specified time."
              details:
                limit: 100
                remaining: 0
                resetAt: "2025-10-01T13:00:00Z"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
    
    InternalServerError:
      description: Internal Server Error - Something went wrong on the server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "INTERNAL_ERROR"
              message: "An internal server error occurred"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"
              timestamp: "2025-10-01T12:00:00Z"
    
    ServiceUnavailableError:
      description: Service Unavailable - The service is temporarily unavailable
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds until service is available
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "SERVICE_UNAVAILABLE"
              message: "The service is temporarily unavailable. Please try again later."
              details:
                estimatedRecoveryTime: "2025-10-01T12:30:00Z"
              requestId: "req_123e4567-e89b-12d3-a456-426614174000"

# ============================================================
# GLOBAL SETTINGS
# ============================================================
x-tagGroups:
  - name: Core APIs
    tags:
      - Users
      - Themes
  - name: AI Features
    tags:
      - AI Content
      - AI Agents
      - Conference Room
      - Tasks
  - name: Customization
    tags:
      - System Customization
  - name: Platform
    tags:
      - Analytics
      - Security

externalDocs:
  description: Complete AuraFrameFX API Documentation
  url: https://docs.auraframefx.com
