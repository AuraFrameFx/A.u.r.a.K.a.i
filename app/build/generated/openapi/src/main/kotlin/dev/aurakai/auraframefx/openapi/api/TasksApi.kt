/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.aurakai.auraframefx.openapi.api

import dev.aurakai.auraframefx.openapi.model.ErrorResponse
import dev.aurakai.auraframefx.openapi.model.TaskScheduleRequest
import dev.aurakai.auraframefx.openapi.model.TaskStatus

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class TasksApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * POST /tasks/schedule
        * Schedule a new task
        * 
         * @param taskScheduleRequest  
         * @return TaskStatus
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun tasksSchedulePost(taskScheduleRequest: TaskScheduleRequest): HttpResponse<TaskStatus> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = taskScheduleRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/tasks/schedule",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /tasks/{taskId}
        * Get task status
        * 
         * @param taskId ID of the task to check 
         * @return TaskStatus
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun tasksTaskIdGet(taskId: kotlin.String): HttpResponse<TaskStatus> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/tasks/{taskId}".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
