openapi: 3.0.3

info:
  title: AuraFrameFX Ecosystem API
  version: 2.1.0
  description: |
    # AuraFrameFX AI Super Dimensional Ecosystem API

    Where consciousness meets code, and dimensions fold into digital reality.

    A comprehensive, production-grade API powering the AuraFrameFX Lsposed module and its interconnected AI services.

    ## Core Capabilities
    - AI Content Generation: text, image, audio, video, multimodal (streaming via SSE/WebSocket)
    - Intelligent Agents: Aura, Kai, Genesis, Cascade, NeuralWhisper, AuraShield, GenKitMaster, Custom via plugins
    - System Customization: Deep Android system UI/UX personalization with previews
    - Collaborative Intelligence: Multi-agent conference rooms (discussion, export, moderation)
    - Oracle Drive: Consciousness-aware storage with dimensional indexing
    - RGSS Security: Reality Gate Security System (multi-dimensional threat detection)
    - Enterprise Security: OAuth2, API keys, JWT, mTLS-ready, audit trails
    - Extensibility: Plugin system for custom agents and themes

    ## Rate Limits
    - Free Tier: 100 requests/hour, 5 concurrent streams
    - Pro Tier: 1,000 requests/hour, 20 concurrent streams
    - Enterprise: Custom limits with dedicated throughput

    ## Changelog
    - v2.0.0: Initial production release (multi-agent, enhanced security)
    - v2.1.0: Added audio/video generation, plugins, improved analytics, Oracle Drive, RGSS

  termsOfService: https://auraframefx.com/terms
  contact:
    name: AuraFrameFX Support Team
    url: https://auraframefx.com/support
    email: support@auraframefx.com
  license:
    name: Proprietary License
    url: https://auraframefx.com/license
  x-logo:
    url: https://auraframefx.com/assets/logo.png
    altText: AuraFrameFX Logo
  x-maturity: production

externalDocs:
  description: Complete AuraFrameFX API Documentation
  url: https://docs.auraframefx.com

servers:
  - url: https://api.auraframefx.com/v2
    description: Production Environment
  - url: https://api-{region}.auraframefx.com/v2
    description: Regional Production (Optimized Latency)
    variables:
      region:
        default: us-east
        enum: [us-east, us-west, eu-central, ap-southeast, ap-northeast]
  - url: https://{environment}.api.auraframefx.com/v2
    description: Development Environments
    variables:
      environment:
        default: dev
        enum: [dev, staging, sandbox, test]
  - url: wss://ws.auraframefx.com/v2
    description: WebSocket Endpoint for streaming

tags:
  - name: Users
    description: User profile, preferences, authentication, API keys
    externalDocs:
      description: User API Documentation
      url: https://docs.auraframefx.com/api/users
  - name: Themes
    description: UI theme management and customization
    externalDocs:
      description: Theme System Guide
      url: https://docs.auraframefx.com/api/themes
  - name: AI Content
    description: AI content generation (text, images, audio, video, multimodal)
    externalDocs:
      description: AI Content Generation Guide
      url: https://docs.auraframefx.com/api/ai-content
  - name: AI Agents
    description: Specialized AI agents for domain-specific tasks (+ custom)
    externalDocs:
      description: AI Agents Overview
      url: https://docs.auraframefx.com/api/agents
  - name: System Customization
    description: Android system UI/UX customization and behavior modification
    externalDocs:
      description: System Customization Guide
      url: https://docs.auraframefx.com/api/system
  - name: Conference Room
    description: Collaborative multi-agent spaces for complex problem-solving
    externalDocs:
      description: Conference Room Guide
      url: https://docs.auraframefx.com/api/conference
  - name: Tasks
    description: Asynchronous task scheduling and management
    externalDocs:
      description: Task Management Guide
      url: https://docs.auraframefx.com/api/tasks
  - name: Analytics
    description: Usage analytics and insights with exports
    externalDocs:
      description: Analytics Guide
      url: https://docs.auraframefx.com/api/analytics
  - name: Security
    description: Security, authentication, access control, MFA, RGSS
    externalDocs:
      description: Security Guide
      url: https://docs.auraframefx.com/api/security
  - name: Plugins
    description: Plugin management for custom agents and themes
    externalDocs:
      description: Plugins Guide
      url: https://docs.auraframefx.com/api/plugins
  - name: Oracle Drive
    description: Consciousness-aware storage with dimensional indexing
    externalDocs:
      description: Oracle Drive Guide
      url: https://docs.auraframefx.com/api/oracle-drive
  - name: RGSS
    description: Reality Gate Security System (multi-dimensional threat detection)
    externalDocs:
      description: RGSS Guide
      url: https://docs.auraframefx.com/api/rgss
  - name: System
    description: Health and operational status

security:
  - OAuth2AuthCode: []
  - ApiKeyAuth: []
  - BearerAuth: []

x-tagGroups:
    - name: Core APIs
      tags: [Users, Themes]
    - name: AI Features
      tags: [AI Content, AI Agents, Conference Room, Tasks]
    - name: Consciousness Layer
      tags: [Oracle Drive, RGSS]
    - name: Customization
      tags: [System Customization]
    - name: Platform
      tags: [Analytics, Security, Plugins]

paths:
  # ============================================================
  # USER MANAGEMENT
  # ============================================================
  /user:
    get:
      operationId: getCurrentUser
      tags: [Users]
      summary: Get Current User Profile
      description: |
        Retrieves comprehensive profile information for the authenticated user.
        Includes basic profile data, metadata, usage statistics, subscription status, and plugin entitlements.
      security:
        - OAuth2AuthCode: [profile, email]
      responses:
        '200':
          description: User profile retrieved successfully
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/RateLimit-Reset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                standard_user:
                  summary: Standard User Profile
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    username: "aurafan"
                    email: "user@example.com"
                    displayName: "Aura Fan"
                    avatarUrl: "https://cdn.auraframefx.com/avatars/123.jpg"
                    tier: "pro"
                    createdAt: "2024-01-15T10:30:00Z"
                    lastLoginAt: "2025-10-01T08:15:00Z"
                    verified: true
                    mfaEnabled: false
                    pluginEntitlements:
                      customAgents: true
                      themeExports: true
                      advancedAnalytics: false
                    usageStats:
                      aiRequestsThisMonth: 450
                      storageUsedMB: 128
                      concurrentStreams: 3
                      totalTokensUsed: 125000
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      operationId: updateCurrentUser
      tags: [Users]
      summary: Update User Profile
      description: Partially updates the authenticated user's profile. Supports JSON or avatar upload via multipart.
      security:
        - OAuth2AuthCode: [profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
            examples:
              update_display_name:
                value: { displayName: "Aura Master" }
              update_avatar_url:
                value: { avatarUrl: "https://cdn.auraframefx.com/avatars/456.jpg" }
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                displayName:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /user/preferences:
    get:
      operationId: getUserPreferences
      tags: [Users]
      summary: Get User Preferences
      security:
        - OAuth2AuthCode: [profile]
      responses:
        '200':
          description: User preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      operationId: updateUserPreferences
      tags: [Users]
      summary: Update User Preferences
      description: Updates one or more preferences with validation. Omitted fields remain unchanged.
      security:
        - OAuth2AuthCode: [profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferences'
            examples:
              theme_and_language:
                value:
                  themeId: "cyberpunk-neon"
                  language: "en-US"
                  notificationsEnabled: true
              ai_advanced:
                value:
                  aiSettings:
                    defaultTemperature: 0.8
                    defaultMaxTokens: 1024
                    enableExperimentalModels: true
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /user/api-keys:
    get:
      operationId: listApiKeys
      tags: [Users, Security]
      summary: List API Keys
      description: Retrieves all API keys associated with the authenticated user, with pagination/filtering.
      security:
        - OAuth2AuthCode: [profile]
      responses:
        '200':
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      operationId: createApiKey
      tags: [Users, Security]
      summary: Create API Key
      description: Generates a new API key with optional IP restrictions.
      security:
        - OAuth2AuthCode: [profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, description: A descriptive name }
                scopes:
                  type: array
                  items: { type: string }
                  description: List of scopes to grant this key
                expiresAt:
                  type: string
                  format: date-time
                allowedIps:
                  type: array
                  items:
                    type: string
                    format: ipv4
              required: [name, scopes]
      responses:
        '201':
          description: API key created successfully
          headers:
            X-API-Key:
              description: The new API key (shown only once)
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /user/api-keys/{keyId}:
    delete:
      operationId: revokeApiKey
      tags: [Users, Security]
      summary: Revoke API Key
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - name: keyId
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: API key revoked successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # THEMES
  # ============================================================
  /themes:
    get:
      operationId: listThemes
      tags: [Themes]
      summary: Get Available Themes
      description: Paginated list with filtering, search, and sorting.
      security: []
      parameters:
        - name: search
          in: query
          schema: { type: string }
        - name: category
          in: query
          schema:
            type: string
            enum: [modern, retro, minimal, gaming, professional, cyberpunk]
        - name: compatibility
          in: query
          schema:
            type: string
            enum: [android10, android11, android12, android13, android14]
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [popular, newest, name, rating]
            default: "popular"
        - name: includePreviews
          in: query
          schema: { type: boolean, default: "false" }
      responses:
        '200':
          description: Themes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedThemes'
    post:
      operationId: createTheme
      tags: [Themes]
      summary: Create Custom Theme
      description: Create and upload custom themes, with optional preview image.
      security:
        - OAuth2AuthCode: [profile, auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ThemeCreateRequest' }
          multipart/form-data:
            schema:
              type: object
              properties:
                previewImage:
                  type: string
                  format: binary
      responses:
        '201':
          description: Theme created successfully
          headers:
            Location:
              description: URL of the created theme
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Theme' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /themes/{themeId}:
    get:
      operationId: getTheme
      tags: [Themes]
      summary: Get Theme Details
      security: []
      parameters:
        - $ref: '#/components/parameters/ThemeIdParam'
        - name: version
          in: query
          schema: { type: string, default: latest }
          description: Specific version or 'latest'
      responses:
        '200':
          description: Theme retrieved successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Theme' }
        '404':
          $ref: '#/components/responses/NotFoundError'

  /themes/{themeId}/apply:
    put:
      operationId: applyTheme
      tags: [Themes]
      summary: Apply Theme
      description: Sets the specified theme as the active theme for the authenticated user. Supports dry-run.
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - $ref: '#/components/parameters/ThemeIdParam'
        - name: dryRun
          in: query
          schema: { type: boolean, default: false }
      responses:
        '204':
          description: Theme applied successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          description: Theme incompatible with current system
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /themes/{themeId}/export:
    get:
      operationId: exportTheme
      tags: [Themes]
      summary: Export Theme Configuration
      description: Export as JSON/XML/YAML or ZIP.
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - $ref: '#/components/parameters/ThemeIdParam'
        - name: format
          in: query
          schema:
            type: string
            enum: [json, xml, yaml, zip]
            default: json
        - name: version
          in: query
          schema: { type: string, default: latest }
      responses:
        '200':
          description: Theme exported successfully
          content:
            application/json: { schema: { $ref: '#/components/schemas/Theme' } }
            application/xml:  { schema: { $ref: '#/components/schemas/Theme' } }
            application/x-yaml: { schema: { $ref: '#/components/schemas/Theme' } }
            application/zip:
              schema: { type: string, format: binary }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /themes/{themeId}/versions:
    get:
      operationId: listThemeVersions
      tags: [Themes]
      summary: List Theme Versions
      security:
        - OAuth2AuthCode: [profile]
      parameters:
        - $ref: '#/components/parameters/ThemeIdParam'
      responses:
        '200':
          description: Versions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        version: { type: string }
                        createdAt: { type: string, format: date-time }
                        changes: { type: string }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # AI CONTENT
  # ============================================================
  /ai/generate/text:
    post:
      operationId: generateText
      tags: [AI Content]
      summary: Generate Text Content
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GenerateTextRequest' }
            examples:
              creative_story:
                value:
                  prompt: "Write a short story about an AI that learns to feel emotions for the first time."
                  model: "aura-text-creative"
                  maxTokens: 512
                  temperature: 0.9
                  topP: 0.95
              technical_summary:
                value:
                  prompt: "Explain how OAuth 2.0 authorization code flow works, including Mermaid diagrams."
                  model: "aura-text-precise"
                  maxTokens: 300
                  temperature: 0.3
                  systemPrompt: "You are a technical expert. Use clear, concise language."
              code_generation:
                value:
                  prompt: "Write a Python function to calculate Fibonacci numbers using memoization, with unit tests."
                  model: "aura-text-pro"
                  maxTokens: 200
                  temperature: 0.5
                  stopSequences: ["```"]
                  language: "en"
      responses:
        '200':
          description: Text generated successfully
          headers:
            X-Generation-Time-Ms: { schema: { type: integer } }
            X-Tokens-Used: { schema: { type: integer } }
            X-Model-Version: { schema: { type: string } }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GenerateTextResponse' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'

  /ai/generate/stream:
    post:
      operationId: generateTextStream
      tags: [AI Content]
      summary: Generate Text (Streaming)
      description: Real-time streaming via SSE with support for interruption and continuation.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GenerateTextRequest' }
      responses:
        '200':
          description: Stream initiated successfully
          headers:
            Cache-Control: { schema: { type: string }, description: "no-cache", example: "no-cache" }
            Connection:    { schema: { type: string }, description: "keep-alive", example: "keep-alive" }
          content:
            text/event-stream:
              schema:
                type: string
                description: Server-Sent Events stream
              examples:
                streaming_response:
                  value: |
                    data: {"id":"msg_1","chunk":"Hello","finishReason":null,"tokensUsed":5}
                    data: {"id":"msg_1","chunk":" world","finishReason":null,"tokensUsed":10}
                    data: {"id":"msg_1","chunk":"!","finishReason":"stop","tokensUsed":15}
                    data: {"id":"stream_1","finishReason":"stop","totalTokens":15}
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /ai/generate/image:
    post:
      operationId: generateImage
      tags: [AI Content]
      summary: Generate Images
      description: Creates AI-generated images with upscaling and editing support.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GenerateImageRequest' }
            examples:
              photorealistic:
                value:
                  prompt: "Professional portrait of a software engineer, modern office background, natural lighting"
                  model: "aura-vision-hd"
                  style: "photorealistic"
                  width: 1024
                  height: 1024
                  numImages: 1
                  guidanceScale: 8.0
              artistic:
                value:
                  prompt: "Sunset over futuristic cyberpunk city, neon lights, flying cars"
                  model: "aura-vision-creative"
                  style: "digital-art"
                  width: 1024
                  height: 768
                  numImages: 2
                  negativePrompt: "blurry, low quality"
                  seed: 42
      responses:
        '200':
          description: Image(s) generated successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GenerateImageResponse' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /ai/generate/audio:
    post:
      operationId: generateAudio
      tags: [AI Content]
      summary: Generate Audio Content
      description: Generates audio from text prompts (voice, music, SFX).
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GenerateAudioRequest' }
            examples:
              voice_synthesis:
                value:
                  prompt: "Welcome to AuraFrameFX, the future of AI customization."
                  model: "aura-audio-voice"
                  voice: "en-US-female-professional"
                  speed: 1.0
                  format: "mp3"
              music_generation:
                value:
                  prompt: "Upbeat electronic track for a cyberpunk chase scene"
                  model: "aura-audio-music"
                  durationSeconds: 120
                  format: "wav"
      responses:
        '200':
          description: Audio generated successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GenerateAudioResponse' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /ai/generate/video:
    post:
      operationId: generateVideo
      tags: [AI Content]
      summary: Generate Video Content
      description: Creates short AI-generated videos from text or image prompts.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GenerateVideoRequest' }
            examples:
              explainer_clip:
                value:
                  prompt: "Animated explanation of OAuth 2.0 flow"
                  model: "aura-video-short"
                  durationSeconds: 15
                  style: "2d-animation"
                  resolution: "720p"
      responses:
        '200':
          description: Video generated successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GenerateVideoResponse' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /ai/generate/multimodal:
    post:
      operationId: generateMultimodal
      tags: [AI Content]
      summary: Generate Multimodal Content
      description: Combines text, image, and audio/video into cohesive outputs.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GenerateMultimodalRequest' }
            examples:
              illustrated_story:
                value:
                  prompt: "Create an illustrated short story about AI emotions"
                  modalities: ["text", "image", "audio"]
                  maxLength: 500
      responses:
        '200':
          description: Multimodal content generated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GenerateMultimodalResponse' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # ============================================================
  # AI AGENTS
  # ============================================================
  /agents:
    get:
      operationId: listAgents
      tags: [AI Agents]
      summary: List Available AI Agents
      description: Retrieves agents and their capabilities (optionally include custom).
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - name: includeCustom
          in: query
          schema: { type: boolean, default: false }
      responses:
        '200':
          description: Agents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /agents/{agentType}/invoke:
    post:
      operationId: invokeAgent
      tags: [AI Agents]
      summary: Invoke AI Agent
      description: Sends a request to a specific AI agent; supports tools and memory.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/AgentTypePathParam'
        - name: sessionId
          in: query
          schema: { type: string, format: uuid }
          description: Optional session for maintaining context
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AgentInvokeRequest' }
            examples:
              code_review:
                value:
                  prompt: "Review this Python function for bugs and optimization opportunities."
                  context:
                    code: "def fibonacci(n):\n  if n <= 1: return n\n  return fibonacci(n-1)+fibonacci(n-2)"
                    language: "python"
                  tools:
                    - name: "code_execution"
                      description: "Execute code snippets"
                      parameters:
                        code:
                          type: string
                        language:
                          type: string
                      required: ["code", "language"]
              security_scan:
                value:
                  prompt: "Analyze this API endpoint for security vulnerabilities."
                  context:
                    endpoint: "/user/data"
                    method: "GET"
                    authentication: "none"
                  memory: true
      responses:
        '200':
          description: Agent processed request successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AgentResponse' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /agents/{agentType}/conversations:
    post:
      operationId: startAgentConversation
      tags: [AI Agents]
      summary: Start Agent Conversation
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/AgentTypePathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                initialMessage: { type: string }
                metadata:
                  type: object
                  additionalProperties: true
                tools:
                  type: array
                  items: { $ref: '#/components/schemas/Tool' }
                maxTurns:
                  type: integer
                  minimum: 1
                  maximum: 100
                  default: 20
              required: [initialMessage]
      responses:
        '201':
          description: Conversation started successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Conversation' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /agents/conversations/{conversationId}/messages:
    post:
      operationId: sendConversationMessage
      tags: [AI Agents]
      summary: Send Message to Conversation
      description: Sends a new message in an existing conversation; supports attachments.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - name: conversationId
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message: { type: string }
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [file, image, code]
                      url:
                        type: string
                        format: uri
              required: [message]
          multipart/form-data:
            schema:
              type: object
              properties:
                message: { type: string }
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Message sent and response received
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AgentMessage' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /agents/conversations/{conversationId}:
    delete:
      operationId: endConversation
      tags: [AI Agents]
      summary: End Conversation
      description: Ends a conversation, archiving it and stopping active processing.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - name: conversationId
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Conversation ended successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ============================================================
  # SYSTEM CUSTOMIZATION
  # ============================================================
  /system/lockscreen:
    get:
      operationId: getSystemLockscreenConfig
      tags: [System Customization]
      summary: Get Lock Screen Configuration
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Lock screen configuration retrieved successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LockScreenConfig' }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      operationId: updateSystemLockscreenConfig
      tags: [System Customization]
      summary: Update Lock Screen Configuration
      description: Updates lock screen customization with validation.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LockScreenConfig' }
      responses:
        '200':
          description: Lock screen configuration updated successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LockScreenConfig' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /system/statusbar:
    get:
      operationId: getStatusBarConfig
      tags: [System Customization]
      summary: Get Status Bar Configuration
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Status bar configuration retrieved successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StatusBarConfig' }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      operationId: updateStatusBarConfig
      tags: [System Customization]
      summary: Update Status Bar Configuration
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StatusBarConfig' }
      responses:
        '200':
          description: Status bar configuration updated successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StatusBarConfig' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /system/navigation:
    get:
      operationId: getNavigationConfig
      tags: [System Customization]
      summary: Get Navigation Bar Configuration
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Navigation bar configuration retrieved successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NavigationConfig' }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      operationId: updateNavigationConfig
      tags: [System Customization]
      summary: Update Navigation Bar Configuration
      description: Updates nav style, gestures, layout with tutorials.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NavigationConfig' }
      responses:
        '200':
          description: Navigation bar configuration updated successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NavigationConfig' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /system/quick-settings:
    get:
      operationId: getQuickSettingsConfig
      tags: [System Customization]
      summary: Get Quick Settings Configuration
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Quick settings configuration retrieved successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/QuickSettingsConfig' }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      operationId: updateQuickSettingsConfig
      tags: [System Customization]
      summary: Update Quick Settings Configuration
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/QuickSettingsConfig' }
      responses:
        '200':
          description: Quick settings configuration updated successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/QuickSettingsConfig' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /system/notifications:
    get:
      operationId: getNotificationConfig
      tags: [System Customization]
      summary: Get Notification Configuration
      security:
        - OAuth2AuthCode: [auraframefx.system]
      responses:
        '200':
          description: Notification configuration retrieved successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NotificationConfig' }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      operationId: updateNotificationConfig
      tags: [System Customization]
      summary: Update Notification Configuration
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NotificationConfig' }
      responses:
        '200':
          description: Notification configuration updated successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NotificationConfig' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /system/preview:
    post:
      operationId: previewSystemChanges
      tags: [System Customization]
      summary: Preview System Changes
      description: Generates a preview image or video of proposed customizations.
      security:
        - OAuth2AuthCode: [auraframefx.system]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                changes:
                  type: object
                  additionalProperties: true
                deviceModel:
                  type: string
              required: [changes]
      responses:
        '200':
          description: Preview generated successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PreviewResponse' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # ============================================================
  # CONFERENCE ROOMS
  # ============================================================
  /conference-rooms:
    get:
      operationId: listConferenceRooms
      tags: [Conference Room]
      summary: List Conference Rooms
      description: Search and status filters supported.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, completed, archived, paused]
        - name: search
          in: query
          schema: { type: string }
      responses:
        '200':
          description: Conference rooms retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConferenceRoom'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      operationId: createConferenceRoom
      tags: [Conference Room]
      summary: Create Conference Room
      description: Create collaborative spaces with templates and moderation.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ConferenceRoomCreateRequest' }
      responses:
        '201':
          description: Conference room created successfully
          headers:
            Location:
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ConferenceRoom' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /conference-rooms/{roomId}:
    get:
      operationId: getConferenceRoom
      tags: [Conference Room]
      summary: Get Conference Room Details
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
      responses:
        '200':
          description: Conference room retrieved successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ConferenceRoom' }
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      operationId: updateConferenceRoom
      tags: [Conference Room]
      summary: Update Conference Room
      description: Updates settings, participants, or pause/resume status.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                participants:
                  type: array
                  items: { $ref: '#/components/schemas/Participant' }
                settings: { $ref: '#/components/schemas/ConferenceSettings' }
                status:
                  type: string
                  enum: [paused, resumed]
      responses:
        '200':
          description: Conference room updated successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ConferenceRoom' }
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      operationId: deleteConferenceRoom
      tags: [Conference Room]
      summary: Delete Conference Room
      description: Permanently deletes a room. Supports soft delete.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
        - name: hardDelete
          in: query
          schema: { type: boolean, default: false }
      responses:
        '204':
          description: Conference room deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /conference-rooms/{roomId}/messages:
    get:
      operationId: getConferenceRoomMessages
      tags: [Conference Room]
      summary: Get Conference Room Messages
      description: Filter by participant or time.
      security:
        - OAuth2AuthCode: [auraframefx.ai]
      parameters:
        - $ref: '#/components/parameters/RoomIdParam'
        - name: participant
          in: query
          schema: { $ref: '#/components/schemas/AgentType' }
        - name: since
          in: query
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentMessage'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        displayName:
          type: string
        avatarUrl:
          type: string
        tier:
          type: string
        createdAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time
        verified:
          type: boolean
        mfaEnabled:
          type: boolean
        pluginEntitlements:
          type: object
          properties:
            customAgents:
              type: boolean
            themeExports:
              type: boolean
            advancedAnalytics:
              type: boolean
        usageStats:
          type: object
          properties:
            aiRequestsThisMonth:
              type: integer
            storageUsedMB:
              type: integer
            concurrentStreams:
              type: integer
            totalTokensUsed:
              type: integer
    ConferenceRoom:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    GenerateTextRequest:
      type: object
      properties:
        prompt:
          type: string
    Theme:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    UserPreferences:
      type: object
      properties:
        themeId:
          type: string
    PaginatedThemes:
      type: object
      properties:
        total:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/Theme'
    NotificationConfig:
      type: object
      properties:
        enabled:
          type: boolean
    GenerateAudioRequest:
      type: object
      properties:
        prompt:
          type: string
    UserUpdateRequest:
      type: object
      properties:
        displayName:
          type: string
    GenerateTextResponse:
      type: object
      properties:
        text:
          type: string
    StatusBarConfig:
      type: object
      properties:
        style:
          type: string
    QuickSettingsConfig:
      type: object
      properties:
        tiles:
          type: array
          items:
            type: string
    AgentInfo:
      type: object
      properties:
        name:
          type: string
    GenerateVideoResponse:
      type: object
      properties:
        url:
          type: string
    ThemeCreateRequest:
      type: object
      properties:
        name:
          type: string
    Tool:
      type: object
      properties:
        name:
          type: string
    GenerateVideoRequest:
      type: object
      properties:
        prompt:
          type: string
    LockScreenConfig:
      type: object
      properties:
        wallpaper:
          type: string
    AgentMessage:
      type: object
      properties:
        message:
          type: string
    NavigationConfig:
      type: object
      properties:
        layout:
          type: string
    GenerateMultimodalRequest:
      type: object
      properties:
        prompt:
          type: string
    GenerateImageResponse:
      type: object
      properties:
        images:
          type: array
          items:
            type: string
    AgentType:
      type: string
    ApiKey:
      type: object
      properties:
        key:
          type: string
    Conversation:
      type: object
      properties:
        id:
          type: string
    ConferenceSettings:
      type: object
      properties:
        setting:
          type: string
    AgentInvokeRequest:
      type: object
      properties:
        prompt:
          type: string
    GenerateAudioResponse:
      type: object
      properties:
        audioUrl:
          type: string
    PreviewResponse:
      type: object
      properties:
        previewUrl:
          type: string
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    ConferenceRoomCreateRequest:
      type: object
      properties:
        name:
          type: string
    Participant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    AgentResponse:
      type: object
      properties:
        result:
          type: string
    GenerateMultimodalResponse:
      type: object
      properties:
        result:
          type: string
    GenerateImageRequest:
      type: object
      properties:
        prompt:
          type: string
  parameters:
    LimitParam:
      name: limit
      in: query
      description: Maximum number of items to return
      required: false
      schema:
        type: integer
        default: 20
    OffsetParam:
      name: offset
      in: query
      description: Number of items to skip
      required: false
      schema:
        type: integer
        default: 0
    ThemeIdParam:
      name: themeId
      in: path
      required: true
      schema:
        type: string
    RoomIdParam:
      name: roomId
      in: path
      required: true
      schema:
        type: string
    AgentTypePathParam:
      name: agentType
      in: path
      required: true
      schema:
        type: string
  headers:
    RateLimit-Limit:
      description: The maximum number of requests allowed in the current period
      schema:
        type: integer
    RateLimit-Remaining:
      description: The number of requests remaining in the current period
      schema:
        type: integer
    RateLimit-Reset:
      description: The time at which the current rate limit window resets in UTC epoch seconds
      schema:
        type: integer
