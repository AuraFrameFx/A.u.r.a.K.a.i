openapi: 3.1.0
info:
  title: AuraFrameFX Ecosystem API (Core)
  version: 2.1.0
  description: |
    Core APIs: Users, Themes, Analytics, Security, Plugins
servers:
  - url: https://api.auraframefx.com/v2
    description: Production Environment
  - url: https://api-{region}.auraframefx.com/v2
    description: Regional Production (Optimized Latency)
    variables:
      region:
        default: us-east
        enum: [ us-east, us-west, eu-central, ap-southeast, ap-northeast ]
  - url: https://{environment}.api.auraframefx.com/v2
    description: Development Environments
    variables:
      environment:
        default: dev
        enum: [ dev, staging, sandbox, test ]
  - url: wss://ws.auraframefx.com/v2
    description: WebSocket Endpoint for streaming
tags:
  - name: Users
  - name: Themes
  - name: Analytics
  - name: Security
  - name: Plugins
paths:
  /user:
    get:
      summary: Get user
      responses:
        '200':
          description: Success
    patch:
      summary: Update user
      responses:
        '200':
          description: Success
  /user/preferences:
    get:
      summary: Get user preferences
      responses:
        '200':
          description: Success
    put:
      summary: Update user preferences
      responses:
        '200':
          description: Success
  /user/api-keys:
    get:
      summary: Get user API keys
      responses:
        '200':
          description: Success
    post:
      summary: Create user API key
      responses:
        '200':
          description: Success
  /user/api-keys/{keyId}:
    parameters:
      - name: keyId
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier of the API key
    delete:
      summary: Delete user API key
      responses:
        '200':
          description: Success
  /themes:
    get:
      summary: Get themes
      responses:
        '200':
          description: Success
    post:
      summary: Create theme
      responses:
        '200':
          description: Success
  /themes/{themeId}:
    parameters:
      - $ref: '#/components/parameters/ThemeIdParam'
    get:
      summary: Get theme by ID
      responses:
        '200':
          description: Success
  /themes/{themeId}/apply:
    parameters:
      - $ref: '#/components/parameters/ThemeIdParam'
    put:
      summary: Apply theme
      responses:
        '200':
          description: Success
  /themes/{themeId}/export:
    parameters:
      - $ref: '#/components/parameters/ThemeIdParam'
    get:
      summary: Export theme
      responses:
        '200':
          description: Success
  /themes/{themeId}/versions:
    parameters:
      - $ref: '#/components/parameters/ThemeIdParam'
    get:
      summary: Get theme versions
      responses:
        '200':
          description: Success
  /analytics/usage:
    get:
      summary: Get analytics usage
      responses:
        '200':
          description: Success
  /analytics/agents:
    get:
      summary: Get analytics agents
      responses:
        '200':
          description: Success
  /analytics/export:
    post:
      summary: Export analytics
      responses:
        '200':
          description: Success
  /security/audit-log:
    get:
      summary: Get security audit log
      responses:
        '200':
          description: Success
  /security/sessions:
    get:
      summary: Get security sessions
      responses:
        '200':
          description: Success
  /security/sessions/{sessionId}:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier of the session
    delete:
      summary: Delete security session
      responses:
        '200':
          description: Success
  /security/mfa:
    post:
      summary: Post security MFA
      responses:
        '200':
          description: Success
  /plugins/agents:
    get:
      summary: Get plugin agents
      responses:
        '200':
          description: Success
    post:
      summary: Create plugin agent
      responses:
        '200':
          description: Success
  /plugins/agents/{pluginId}:
    parameters:
      - name: pluginId
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier of the plugin agent
    delete:
      summary: Delete plugin agent
      responses:
        '200':
          description: Success
components:
  securitySchemes:
    OAuth2AuthCode:
      type: oauth2
      description: OAuth 2.0 Authorization Code Flow with PKCE
      flows:
        authorizationCode:
          authorizationUrl: https://auth.auraframefx.com/oauth2/authorize
          tokenUrl: https://auth.auraframefx.com/oauth2/token
          refreshUrl: https://auth.auraframefx.com/oauth2/refresh
          scopes:
            profile: Read and write access to user profile
            email: Read access to user email address
            auraframefx.ai: Access to AI generation and agent features
            auraframefx.system: Access to system customization features
            auraframefx.admin: Administrative access (restricted)
            auraframefx.plugins: Access to plugin management
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API Key for server-to-server authentication with IP whitelisting
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT bearer token authentication
  parameters:
    ThemeIdParam:
      name: themeId
      in: path
      required: true
      schema: { type: string }
      description: Unique identifier of the theme
      example: "aurora-dark"
    LimitParam:
      name: limit
      in: query
      description: Maximum number of items to return
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
    OffsetParam:
      name: offset
      in: query
      description: Number of items to skip
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
  headers:
    RateLimit-Limit:
      description: Number of allowed requests in the current period
      schema: { type: integer }
    RateLimit-Remaining:
      description: Number of remaining requests in the current period
      schema: { type: integer }
    RateLimit-Reset:
      description: Time when the rate limit resets (UTC epoch seconds)
      schema: { type: integer, format: int64 }
  schemas:
    Username:
      type: string
      pattern: '^[A-Za-z0-9_-]{3,30}$'
    LanguageTag:
      type: string
      pattern: '^[a-z]{2}-[A-Z]{2}$'
    HexColor:
      type: string
      pattern: '^#[0-9A-Fa-f]{6}$'
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          $ref: '#/components/schemas/Username'
        email:
          type: string
          format: email
        displayName:
          type: string
        avatarUrl:
          type: string
          format: uri
        tier:
          type: string
          enum: [ free, pro, enterprise ]
        verified:
          type: boolean
        mfaEnabled:
          type: boolean
        pluginEntitlements:
          type: object
          additionalProperties: false
          properties:
            customAgents:
              type: boolean
            themeExports:
              type: boolean
            advancedAnalytics:
              type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        lastLoginAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        usageStats:
          type: object
          additionalProperties: false
          properties:
            aiRequestsThisMonth:
              type: integer
            storageUsedMB:
              type: integer
            concurrentStreams:
              type: integer
            totalTokensUsed:
              type: integer
      required: [ id, username, email, tier, createdAt ]
    UserUpdateRequest:
      type: object
      additionalProperties: false
      properties:
        displayName: { type: string, minLength: 1, maxLength: 100 }
        avatarUrl: { type: string, format: uri }
        mfaEnabled: { type: boolean }
    UserPreferences:
      type: object
      additionalProperties: false
      properties:
        themeId: { type: string }
        language: { $ref: '#/components/schemas/LanguageTag' }
        timezone: { type: string }
        notificationsEnabled: { type: boolean, default: true }
        emailNotifications:
          type: object
          additionalProperties: false
          properties:
            taskCompletions: { type: boolean, default: true }
            weeklyDigest: { type: boolean, default: true }
            securityAlerts: { type: boolean, default: true }
        defaultAIModel: { type: string }
        aiSettings:
          type: object
          additionalProperties: false
          properties:
            defaultTemperature: { type: number, format: float, minimum: 0.0, maximum: 2.0, default: 0.7 }
            defaultMaxTokens: { type: integer, minimum: 1, maximum: 8192, default: 512 }
            enableExperimentalModels: { type: boolean, default: false }
    ApiKey:
      type: object
      properties:
        id: { type: string, format: uuid, readOnly: true }
        name: { type: string }
        key:
          type: string
          description: The actual API key (only shown once at creation)
          writeOnly: true
        keyPrefix: { type: string, readOnly: true }
        scopes:
          type: array
          items: { type: string }
        allowedIps:
          type: array
          items: { type: string, format: ipv4 }
          nullable: true
        status:
          type: string
          enum: [ active, expired, revoked ]
          readOnly: true
        createdAt: { type: string, format: date-time, readOnly: true }
        lastUsedAt: { type: string, format: date-time, readOnly: true, nullable: true }
        expiresAt: { type: string, format: date-time, nullable: true }
      required: [ id, name, scopes, createdAt, status ]
    Theme:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [ modern, retro, minimal, gaming, professional, cyberpunk ]
        primaryColor:
          $ref: '#/components/schemas/HexColor'
        secondaryColor:
          $ref: '#/components/schemas/HexColor'
        accentColor:
          $ref: '#/components/schemas/HexColor'
        backgroundColor:
          $ref: '#/components/schemas/HexColor'
        textColor:
          $ref: '#/components/schemas/HexColor'
        previewUrl: { type: string, format: uri }
        author: { type: string }
        downloads: { type: integer, readOnly: true }
        rating:
          type: number
          format: float
          minimum: 0.0
          maximum: 5.0
          readOnly: true
        tags:
          type: array
          items: { type: string }
        compatibility:
          type: array
          items:
            type: string
            enum: [ android10, android11, android12, android13, android14 ]
          readOnly: true
        versions:
          type: array
          items: { type: string }
          readOnly: true
        createdAt: { type: string, format: date-time, readOnly: true }
      required: [ id, name, primaryColor, secondaryColor ]
    ThemeCreateRequest:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
        description:
          type: string
          maxLength: 500
        category:
          type: string
          enum: [ modern, retro, minimal, gaming, professional, cyberpunk ]
        primaryColor:
          $ref: '#/components/schemas/HexColor'
        secondaryColor:
          $ref: '#/components/schemas/HexColor'
        accentColor:
          $ref: '#/components/schemas/HexColor'
        backgroundColor:
          $ref: '#/components/schemas/HexColor'
        textColor:
          $ref: '#/components/schemas/HexColor'
        tags:
          type: array
          items:
            type: string
          maxItems: 10
        compatibility:
          type: array
          items:
            type: string
            enum: [ android10, android11, android12, android13, android14 ]
      required: [ name, primaryColor, secondaryColor ]
    PaginatedThemes:
      type: object
      properties:
        total: { type: integer }
        limit: { type: integer }
        offset: { type: integer }
        data:
          type: array
          items: { $ref: '#/components/schemas/Theme' }
      required: [ total, limit, offset, data ]
    # Analytics
    UsageAnalytics:
      type: object
      properties:
        userId: { type: string, format: uuid }
        period:
          type: object
          properties:
            start: { type: string, format: date }
            end: { type: string, format: date }
        usage:
          type: object
          properties:
            requests: { type: integer }
            tokensUsed: { type: integer }
            activeAgents: { type: integer }
        breakdown:
          type: object
          additionalProperties: true
      required: [ userId, period, usage ]
    # Security
    AuditLogEntry:
      type: object
      properties:
        id: { type: string, format: uuid }
        eventType: { type: string }
        timestamp: { type: string, format: date-time }
        userId: { type: string, format: uuid }
        details:
          type: object
          additionalProperties: true
    Session:
      type: object
      properties:
        id: { type: string, format: uuid }
        device: { type: string }
        mfaEnabled: { type: boolean }
        createdAt: { type: string, format: date-time }
        lastActiveAt: { type: string, format: date-time }
    # Plugins
    Plugin:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        category: { type: string }
        installed: { type: boolean }
        config:
          type: object
          additionalProperties: true
    # Error/Response objects
    Error:
      type: object
      properties:
        code: { type: string }
        message: { type: string }
        details:
          type: object
          additionalProperties: true
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailableError:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
